"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Statistic to use over the aggregation period
 */
var Statistic;
(function (Statistic) {
    Statistic["SampleCount"] = "SampleCount";
    Statistic["Average"] = "Average";
    Statistic["Sum"] = "Sum";
    Statistic["Minimum"] = "Minimum";
    Statistic["Maximum"] = "Maximum";
})(Statistic = exports.Statistic || (exports.Statistic = {}));
/**
 * Unit for metric
 */
var Unit;
(function (Unit) {
    Unit["Seconds"] = "Seconds";
    Unit["Microseconds"] = "Microseconds";
    Unit["Milliseconds"] = "Milliseconds";
    Unit["Bytes_"] = "Bytes";
    Unit["Kilobytes"] = "Kilobytes";
    Unit["Megabytes"] = "Megabytes";
    Unit["Gigabytes"] = "Gigabytes";
    Unit["Terabytes"] = "Terabytes";
    Unit["Bits"] = "Bits";
    Unit["Kilobits"] = "Kilobits";
    Unit["Megabits"] = "Megabits";
    Unit["Gigabits"] = "Gigabits";
    Unit["Terabits"] = "Terabits";
    Unit["Percent"] = "Percent";
    Unit["Count"] = "Count";
    Unit["BytesPerSecond"] = "Bytes/Second";
    Unit["KilobytesPerSecond"] = "Kilobytes/Second";
    Unit["MegabytesPerSecond"] = "Megabytes/Second";
    Unit["GigabytesPerSecond"] = "Gigabytes/Second";
    Unit["TerabytesPerSecond"] = "Terabytes/Second";
    Unit["BitsPerSecond"] = "Bits/Second";
    Unit["KilobitsPerSecond"] = "Kilobits/Second";
    Unit["MegabitsPerSecond"] = "Megabits/Second";
    Unit["GigabitsPerSecond"] = "Gigabits/Second";
    Unit["TerabitsPerSecond"] = "Terabits/Second";
    Unit["CountPerSecond"] = "Count/Second";
    Unit["None"] = "None";
})(Unit = exports.Unit || (exports.Unit = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0cmljLXR5cGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWV0cmljLXR5cGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBK0JBOztHQUVHO0FBQ0gsSUFBWSxTQU1YO0FBTkQsV0FBWSxTQUFTO0lBQ25CLHdDQUEyQixDQUFBO0lBQzNCLGdDQUFtQixDQUFBO0lBQ25CLHdCQUFXLENBQUE7SUFDWCxnQ0FBbUIsQ0FBQTtJQUNuQixnQ0FBbUIsQ0FBQTtBQUNyQixDQUFDLEVBTlcsU0FBUyxHQUFULGlCQUFTLEtBQVQsaUJBQVMsUUFNcEI7QUFFRDs7R0FFRztBQUNILElBQVksSUE0Qlg7QUE1QkQsV0FBWSxJQUFJO0lBQ2QsMkJBQW1CLENBQUE7SUFDbkIscUNBQTZCLENBQUE7SUFDN0IscUNBQTZCLENBQUE7SUFDN0Isd0JBQWdCLENBQUE7SUFDaEIsK0JBQXVCLENBQUE7SUFDdkIsK0JBQXVCLENBQUE7SUFDdkIsK0JBQXVCLENBQUE7SUFDdkIsK0JBQXVCLENBQUE7SUFDdkIscUJBQWEsQ0FBQTtJQUNiLDZCQUFxQixDQUFBO0lBQ3JCLDZCQUFxQixDQUFBO0lBQ3JCLDZCQUFxQixDQUFBO0lBQ3JCLDZCQUFxQixDQUFBO0lBQ3JCLDJCQUFtQixDQUFBO0lBQ25CLHVCQUFlLENBQUE7SUFDZix1Q0FBK0IsQ0FBQTtJQUMvQiwrQ0FBdUMsQ0FBQTtJQUN2QywrQ0FBdUMsQ0FBQTtJQUN2QywrQ0FBdUMsQ0FBQTtJQUN2QywrQ0FBdUMsQ0FBQTtJQUN2QyxxQ0FBNkIsQ0FBQTtJQUM3Qiw2Q0FBcUMsQ0FBQTtJQUNyQyw2Q0FBcUMsQ0FBQTtJQUNyQyw2Q0FBcUMsQ0FBQTtJQUNyQyw2Q0FBcUMsQ0FBQTtJQUNyQyx1Q0FBK0IsQ0FBQTtJQUMvQixxQkFBYSxDQUFBO0FBQ2YsQ0FBQyxFQTVCVyxJQUFJLEdBQUosWUFBSSxLQUFKLFlBQUksUUE0QmYiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogSW50ZXJmYWNlIGZvciBtZXRyaWNzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSU1ldHJpYyB7XG4gIC8qKlxuICAgKiBUdXJuIHRoaXMgbWV0cmljIG9iamVjdCBpbnRvIGFuIGFsYXJtIGNvbmZpZ3VyYXRpb25cbiAgICovXG4gIHRvQWxhcm1Db25maWcoKTogTWV0cmljQWxhcm1Db25maWc7XG5cbiAgLyoqXG4gICAqIFR1cm4gdGhpcyBtZXRyaWMgb2JqZWN0IGludG8gYSBncmFwaCBjb25maWd1cmF0aW9uXG4gICAqL1xuICB0b0dyYXBoQ29uZmlnKCk6IE1ldHJpY0dyYXBoQ29uZmlnO1xufVxuXG4vKipcbiAqIE1ldHJpYyBkaW1lbnNpb25cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBEaW1lbnNpb24ge1xuICAvKipcbiAgICogTmFtZSBvZiB0aGUgZGltZW5zaW9uXG4gICAqL1xuICByZWFkb25seSBuYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFZhbHVlIG9mIHRoZSBkaW1lbnNpb25cbiAgICovXG4gIHJlYWRvbmx5IHZhbHVlOiBhbnk7XG59XG5cbi8qKlxuICogU3RhdGlzdGljIHRvIHVzZSBvdmVyIHRoZSBhZ2dyZWdhdGlvbiBwZXJpb2RcbiAqL1xuZXhwb3J0IGVudW0gU3RhdGlzdGljIHtcbiAgU2FtcGxlQ291bnQgPSAnU2FtcGxlQ291bnQnLFxuICBBdmVyYWdlID0gJ0F2ZXJhZ2UnLFxuICBTdW0gPSAnU3VtJyxcbiAgTWluaW11bSA9ICdNaW5pbXVtJyxcbiAgTWF4aW11bSA9ICdNYXhpbXVtJyxcbn1cblxuLyoqXG4gKiBVbml0IGZvciBtZXRyaWNcbiAqL1xuZXhwb3J0IGVudW0gVW5pdCB7XG4gIFNlY29uZHMgPSAnU2Vjb25kcycsXG4gIE1pY3Jvc2Vjb25kcyA9ICdNaWNyb3NlY29uZHMnLFxuICBNaWxsaXNlY29uZHMgPSAnTWlsbGlzZWNvbmRzJyxcbiAgQnl0ZXNfID0gJ0J5dGVzJyxcbiAgS2lsb2J5dGVzID0gJ0tpbG9ieXRlcycsXG4gIE1lZ2FieXRlcyA9ICdNZWdhYnl0ZXMnLFxuICBHaWdhYnl0ZXMgPSAnR2lnYWJ5dGVzJyxcbiAgVGVyYWJ5dGVzID0gJ1RlcmFieXRlcycsXG4gIEJpdHMgPSAnQml0cycsXG4gIEtpbG9iaXRzID0gJ0tpbG9iaXRzJyxcbiAgTWVnYWJpdHMgPSAnTWVnYWJpdHMnLFxuICBHaWdhYml0cyA9ICdHaWdhYml0cycsXG4gIFRlcmFiaXRzID0gJ1RlcmFiaXRzJyxcbiAgUGVyY2VudCA9ICdQZXJjZW50JyxcbiAgQ291bnQgPSAnQ291bnQnLFxuICBCeXRlc1BlclNlY29uZCA9ICdCeXRlcy9TZWNvbmQnLFxuICBLaWxvYnl0ZXNQZXJTZWNvbmQgPSAnS2lsb2J5dGVzL1NlY29uZCcsXG4gIE1lZ2FieXRlc1BlclNlY29uZCA9ICdNZWdhYnl0ZXMvU2Vjb25kJyxcbiAgR2lnYWJ5dGVzUGVyU2Vjb25kID0gJ0dpZ2FieXRlcy9TZWNvbmQnLFxuICBUZXJhYnl0ZXNQZXJTZWNvbmQgPSAnVGVyYWJ5dGVzL1NlY29uZCcsXG4gIEJpdHNQZXJTZWNvbmQgPSAnQml0cy9TZWNvbmQnLFxuICBLaWxvYml0c1BlclNlY29uZCA9ICdLaWxvYml0cy9TZWNvbmQnLFxuICBNZWdhYml0c1BlclNlY29uZCA9ICdNZWdhYml0cy9TZWNvbmQnLFxuICBHaWdhYml0c1BlclNlY29uZCA9ICdHaWdhYml0cy9TZWNvbmQnLFxuICBUZXJhYml0c1BlclNlY29uZCA9ICdUZXJhYml0cy9TZWNvbmQnLFxuICBDb3VudFBlclNlY29uZCA9ICdDb3VudC9TZWNvbmQnLFxuICBOb25lID0gJ05vbmUnXG59XG5cbi8qKlxuICogUHJvcGVydGllcyB1c2VkIHRvIGNvbnN0cnVjdCB0aGUgTWV0cmljIGlkZW50aWZ5aW5nIHBhcnQgb2YgYW4gQWxhcm1cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBNZXRyaWNBbGFybUNvbmZpZyB7XG4gIC8qKlxuICAgKiBUaGUgZGltZW5zaW9ucyB0byBhcHBseSB0byB0aGUgYWxhcm1cbiAgICovXG4gIHJlYWRvbmx5IGRpbWVuc2lvbnM/OiBEaW1lbnNpb25bXTtcblxuICAvKipcbiAgICogTmFtZXNwYWNlIG9mIHRoZSBtZXRyaWNcbiAgICovXG4gIHJlYWRvbmx5IG5hbWVzcGFjZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBOYW1lIG9mIHRoZSBtZXRyaWNcbiAgICovXG4gIHJlYWRvbmx5IG1ldHJpY05hbWU6IHN0cmluZztcblxuICAvKipcbiAgICogSG93IG1hbnkgc2Vjb25kcyB0byBhZ2dyZWdhdGUgb3ZlclxuICAgKi9cbiAgcmVhZG9ubHkgcGVyaW9kOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFNpbXBsZSBhZ2dyZWdhdGlvbiBmdW5jdGlvbiB0byB1c2VcbiAgICovXG4gIHJlYWRvbmx5IHN0YXRpc3RpYz86IFN0YXRpc3RpYztcblxuICAvKipcbiAgICogUGVyY2VudGlsZSBhZ2dyZWdhdGlvbiBmdW5jdGlvbiB0byB1c2VcbiAgICovXG4gIHJlYWRvbmx5IGV4dGVuZGVkU3RhdGlzdGljPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgdW5pdCBvZiB0aGUgYWxhcm1cbiAgICovXG4gIHJlYWRvbmx5IHVuaXQ/OiBVbml0O1xufVxuXG4vKipcbiAqIFByb3BlcnRpZXMgdXNlZCB0byBjb25zdHJ1Y3QgdGhlIE1ldHJpYyBpZGVudGlmeWluZyBwYXJ0IG9mIGEgR3JhcGhcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBNZXRyaWNHcmFwaENvbmZpZyB7XG4gIC8qKlxuICAgKiBUaGUgZGltZW5zaW9ucyB0byBhcHBseSB0byB0aGUgYWxhcm1cbiAgICovXG4gIHJlYWRvbmx5IGRpbWVuc2lvbnM/OiBEaW1lbnNpb25bXTtcblxuICAvKipcbiAgICogTmFtZXNwYWNlIG9mIHRoZSBtZXRyaWNcbiAgICovXG4gIHJlYWRvbmx5IG5hbWVzcGFjZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBOYW1lIG9mIHRoZSBtZXRyaWNcbiAgICovXG4gIHJlYWRvbmx5IG1ldHJpY05hbWU6IHN0cmluZztcblxuICAvKipcbiAgICogSG93IG1hbnkgc2Vjb25kcyB0byBhZ2dyZWdhdGUgb3ZlclxuICAgKi9cbiAgcmVhZG9ubHkgcGVyaW9kOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIExhYmVsIGZvciB0aGUgbWV0cmljXG4gICAqL1xuICByZWFkb25seSBsYWJlbD86IHN0cmluZztcblxuICAvKipcbiAgICogQ29sb3IgZm9yIHRoZSBncmFwaCBsaW5lXG4gICAqL1xuICByZWFkb25seSBjb2xvcj86IHN0cmluZztcblxuICAvKipcbiAgICogQWdncmVnYXRpb24gZnVuY3Rpb24gdG8gdXNlIChjYW4gYmUgZWl0aGVyIHNpbXBsZSBvciBhIHBlcmNlbnRpbGUpXG4gICAqL1xuICByZWFkb25seSBzdGF0aXN0aWM/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSB1bml0IG9mIHRoZSBhbGFybVxuICAgKi9cbiAgcmVhZG9ubHkgdW5pdD86IFVuaXQ7XG59Il19