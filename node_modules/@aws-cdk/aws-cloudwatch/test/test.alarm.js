"use strict";
const assert_1 = require("@aws-cdk/assert");
const cdk_1 = require("@aws-cdk/cdk");
const lib_1 = require("../lib");
const testMetric = new lib_1.Metric({
    namespace: 'CDK/Test',
    metricName: 'Metric',
});
class TestAlarmAction {
    constructor(arn) {
        this.arn = arn;
    }
    bind(_scope, _alarm) {
        return { alarmActionArn: this.arn };
    }
}
module.exports = {
    'can make simple alarm'(test) {
        // GIVEN
        const stack = new cdk_1.Stack();
        // WHEN
        new lib_1.Alarm(stack, 'Alarm', {
            metric: testMetric,
            threshold: 1000,
            evaluationPeriods: 3,
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::CloudWatch::Alarm', {
            ComparisonOperator: "GreaterThanOrEqualToThreshold",
            EvaluationPeriods: 3,
            MetricName: "Metric",
            Namespace: "CDK/Test",
            Period: 300,
            Statistic: 'Average',
            Threshold: 1000,
        }));
        test.done();
    },
    'override metric period in Alarm'(test) {
        // GIVEN
        const stack = new cdk_1.Stack();
        // WHEN
        new lib_1.Alarm(stack, 'Alarm', {
            metric: testMetric,
            periodSec: 600,
            threshold: 1000,
            evaluationPeriods: 3,
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::CloudWatch::Alarm', {
            ComparisonOperator: "GreaterThanOrEqualToThreshold",
            EvaluationPeriods: 3,
            MetricName: "Metric",
            Namespace: "CDK/Test",
            Period: 600,
            Statistic: 'Average',
            Threshold: 1000,
        }));
        test.done();
    },
    'override statistic Alarm'(test) {
        // GIVEN
        const stack = new cdk_1.Stack();
        // WHEN
        new lib_1.Alarm(stack, 'Alarm', {
            metric: testMetric,
            statistic: 'max',
            threshold: 1000,
            evaluationPeriods: 3,
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::CloudWatch::Alarm', {
            ComparisonOperator: "GreaterThanOrEqualToThreshold",
            EvaluationPeriods: 3,
            MetricName: "Metric",
            Namespace: "CDK/Test",
            Period: 300,
            Statistic: 'Maximum',
            Threshold: 1000,
        }));
        test.done();
    },
    'can set DatapointsToAlarm'(test) {
        // GIVEN
        const stack = new cdk_1.Stack();
        // WHEN
        new lib_1.Alarm(stack, 'Alarm', {
            metric: testMetric,
            threshold: 1000,
            evaluationPeriods: 3,
            datapointsToAlarm: 2,
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::CloudWatch::Alarm', {
            ComparisonOperator: "GreaterThanOrEqualToThreshold",
            EvaluationPeriods: 3,
            DatapointsToAlarm: 2,
            MetricName: "Metric",
            Namespace: "CDK/Test",
            Period: 300,
            Statistic: 'Average',
            Threshold: 1000,
        }));
        test.done();
    },
    'can add actions to alarms'(test) {
        // GIVEN
        const stack = new cdk_1.Stack();
        // WHEN
        const alarm = new lib_1.Alarm(stack, 'Alarm', {
            metric: testMetric,
            threshold: 1000,
            evaluationPeriods: 2
        });
        alarm.addAlarmAction(new TestAlarmAction('A'));
        alarm.addInsufficientDataAction(new TestAlarmAction('B'));
        alarm.addOkAction(new TestAlarmAction('C'));
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::CloudWatch::Alarm', {
            AlarmActions: ['A'],
            InsufficientDataActions: ['B'],
            OKActions: ['C'],
        }));
        test.done();
    },
    'can make alarm directly from metric'(test) {
        // GIVEN
        const stack = new cdk_1.Stack();
        // WHEN
        testMetric.createAlarm(stack, 'Alarm', {
            threshold: 1000,
            evaluationPeriods: 2,
            statistic: 'min',
            periodSec: 10,
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::CloudWatch::Alarm', {
            ComparisonOperator: "GreaterThanOrEqualToThreshold",
            EvaluationPeriods: 2,
            MetricName: "Metric",
            Namespace: "CDK/Test",
            Period: 10,
            Statistic: 'Minimum',
            Threshold: 1000,
        }));
        test.done();
    },
    'can use percentile string to make alarm'(test) {
        // GIVEN
        const stack = new cdk_1.Stack();
        // WHEN
        testMetric.createAlarm(stack, 'Alarm', {
            threshold: 1000,
            evaluationPeriods: 2,
            statistic: 'p99.9'
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::CloudWatch::Alarm', {
            ExtendedStatistic: 'p99.9',
        }));
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,