"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const path = require("path");
const default_1 = require("../lib/default");
const aws_entities_1 = require("./aws-entities");
async function main() {
    const lines = [
        "import { Fact, FactName } from './fact';",
        '',
        '// tslint:disable:object-literal-key-quotes',
        '// tslint:disable:max-line-length',
        '',
        '/**',
        ' * Built-in regional information, re-generated by `npm run build`.',
        ' *',
        ` * @generated ${new Date().toISOString()}`,
        ' */',
        'export class BuiltIns {',
        '  /**',
        '   * Registers all the built in regional data in the RegionInfo database.',
        '   */',
        '  public static register(): void {',
    ];
    const AWS_OLDER_REGIONS = new Set([
        'us-east-1',
        'us-west-1',
        'us-west-2',
        'ap-southeast-1',
        'ap-southeast-2',
        'ap-northeast-1',
        'sa-east-1'
    ]);
    const AWS_CDK_METADATA = new Set([
        'us-east-2',
        'us-east-1',
        'us-west-1',
        'us-west-2',
        'ap-south-1',
        // 'ap-east-1',
        // 'ap-northeast-3',
        'ap-northeast-2',
        'ap-southeast-1',
        'ap-southeast-2',
        'ap-northeast-1',
        'ca-central-1',
        'cn-north-1',
        'cn-northwest-1',
        'eu-central-1',
        'eu-west-1',
        'eu-west-2',
        'eu-west-3',
        'eu-north-1',
        'sa-east-1',
    ]);
    for (const region of aws_entities_1.AWS_REGIONS) {
        const partition = region.startsWith('cn-') ? 'aws-cn' : 'aws';
        registerFact(region, 'partition', partition);
        const domainSuffix = partition === 'aws' ? 'amazonaws.com' : 'amazonaws.com.cn';
        registerFact(region, 'domainSuffix', domainSuffix);
        registerFact(region, 'cdkMetadataResourceAvailable', AWS_CDK_METADATA.has(region) ? 'YES' : 'NO');
        registerFact(region, 's3StaticWebsiteEndpoint', AWS_OLDER_REGIONS.has(region)
            ? `s3-website-${region}.${domainSuffix}`
            : `s3-website.${region}.${domainSuffix}`);
        for (const service of aws_entities_1.AWS_SERVICES) {
            registerFact(region, ['servicePrincipal', service], default_1.Default.servicePrincipal(service, region, domainSuffix));
        }
    }
    lines.push('  }');
    lines.push('');
    lines.push('  private constructor() {}'),
        lines.push('}');
    await fs.writeFile(path.resolve(__dirname, '..', 'lib', 'built-ins.generated.ts'), lines.join('\n'));
    function registerFact(region, name, value) {
        const factName = typeof name === 'string' ? name : `${name[0]}(${name.slice(1).map(s => JSON.stringify(s)).join(', ')})`;
        lines.push(`    Fact.register({ region: ${JSON.stringify(region)}, name: FactName.${factName}, value: ${JSON.stringify(value)} });`);
    }
}
main().catch(e => {
    // tslint:disable-next-line: no-console
    console.error(e);
    process.exit(-1);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGUtc3RhdGljLWRhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJnZW5lcmF0ZS1zdGF0aWMtZGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUFnQztBQUNoQyw2QkFBOEI7QUFDOUIsNENBQXlDO0FBQ3pDLGlEQUEyRDtBQUUzRCxLQUFLLFVBQVUsSUFBSTtJQUNqQixNQUFNLEtBQUssR0FBRztRQUNaLDBDQUEwQztRQUMxQyxFQUFFO1FBQ0YsNkNBQTZDO1FBQzdDLG1DQUFtQztRQUNuQyxFQUFFO1FBQ0YsS0FBSztRQUNMLG9FQUFvRTtRQUNwRSxJQUFJO1FBQ0osaUJBQWlCLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLEVBQUU7UUFDM0MsS0FBSztRQUNMLHlCQUF5QjtRQUN6QixPQUFPO1FBQ1AsMkVBQTJFO1FBQzNFLE9BQU87UUFDUCxvQ0FBb0M7S0FDckMsQ0FBQztJQUVGLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxHQUFHLENBQUM7UUFDaEMsV0FBVztRQUNYLFdBQVc7UUFDWCxXQUFXO1FBQ1gsZ0JBQWdCO1FBQ2hCLGdCQUFnQjtRQUNoQixnQkFBZ0I7UUFDaEIsV0FBVztLQUNaLENBQUMsQ0FBQztJQUVILE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxHQUFHLENBQUM7UUFDL0IsV0FBVztRQUNYLFdBQVc7UUFDWCxXQUFXO1FBQ1gsV0FBVztRQUNYLFlBQVk7UUFDWixlQUFlO1FBQ2Ysb0JBQW9CO1FBQ3BCLGdCQUFnQjtRQUNoQixnQkFBZ0I7UUFDaEIsZ0JBQWdCO1FBQ2hCLGdCQUFnQjtRQUNoQixjQUFjO1FBQ2QsWUFBWTtRQUNaLGdCQUFnQjtRQUNoQixjQUFjO1FBQ2QsV0FBVztRQUNYLFdBQVc7UUFDWCxXQUFXO1FBQ1gsWUFBWTtRQUNaLFdBQVc7S0FDWixDQUFDLENBQUM7SUFFSCxLQUFLLE1BQU0sTUFBTSxJQUFJLDBCQUFXLEVBQUU7UUFDaEMsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDOUQsWUFBWSxDQUFDLE1BQU0sRUFBRSxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFN0MsTUFBTSxZQUFZLEdBQUcsU0FBUyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQztRQUNoRixZQUFZLENBQUMsTUFBTSxFQUFFLGNBQWMsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUVuRCxZQUFZLENBQUMsTUFBTSxFQUFFLDhCQUE4QixFQUFFLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVsRyxZQUFZLENBQUMsTUFBTSxFQUFFLHlCQUF5QixFQUFFLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUM7WUFDM0UsQ0FBQyxDQUFDLGNBQWMsTUFBTSxJQUFJLFlBQVksRUFBRTtZQUN4QyxDQUFDLENBQUMsY0FBYyxNQUFNLElBQUksWUFBWSxFQUFFLENBQUMsQ0FBQztRQUU1QyxLQUFLLE1BQU0sT0FBTyxJQUFJLDJCQUFZLEVBQUU7WUFDbEMsWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDLGtCQUFrQixFQUFFLE9BQU8sQ0FBQyxFQUFFLGlCQUFPLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDO1NBQzlHO0tBQ0Y7SUFDRCxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xCLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDZixLQUFLLENBQUMsSUFBSSxDQUFDLDRCQUE0QixDQUFDO1FBQ3hDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFaEIsTUFBTSxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsd0JBQXdCLENBQUMsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFFckcsU0FBUyxZQUFZLENBQUMsTUFBYyxFQUFFLElBQXVCLEVBQUUsS0FBYTtRQUMxRSxNQUFNLFFBQVEsR0FBRyxPQUFPLElBQUksS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7UUFDekgsS0FBSyxDQUFDLElBQUksQ0FBQywrQkFBK0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsb0JBQW9CLFFBQVEsWUFBWSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN2SSxDQUFDO0FBQ0gsQ0FBQztBQUVELElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUNmLHVDQUF1QztJQUN2QyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2pCLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNuQixDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcyA9IHJlcXVpcmUoJ2ZzLWV4dHJhJyk7XG5pbXBvcnQgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmltcG9ydCB7IERlZmF1bHQgfSBmcm9tICcuLi9saWIvZGVmYXVsdCc7XG5pbXBvcnQgeyBBV1NfUkVHSU9OUywgQVdTX1NFUlZJQ0VTIH0gZnJvbSAnLi9hd3MtZW50aXRpZXMnO1xuXG5hc3luYyBmdW5jdGlvbiBtYWluKCk6IFByb21pc2U8dm9pZD4ge1xuICBjb25zdCBsaW5lcyA9IFtcbiAgICBcImltcG9ydCB7IEZhY3QsIEZhY3ROYW1lIH0gZnJvbSAnLi9mYWN0JztcIixcbiAgICAnJyxcbiAgICAnLy8gdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwta2V5LXF1b3RlcycsXG4gICAgJy8vIHRzbGludDpkaXNhYmxlOm1heC1saW5lLWxlbmd0aCcsXG4gICAgJycsXG4gICAgJy8qKicsXG4gICAgJyAqIEJ1aWx0LWluIHJlZ2lvbmFsIGluZm9ybWF0aW9uLCByZS1nZW5lcmF0ZWQgYnkgYG5wbSBydW4gYnVpbGRgLicsXG4gICAgJyAqJyxcbiAgICBgICogQGdlbmVyYXRlZCAke25ldyBEYXRlKCkudG9JU09TdHJpbmcoKX1gLFxuICAgICcgKi8nLFxuICAgICdleHBvcnQgY2xhc3MgQnVpbHRJbnMgeycsXG4gICAgJyAgLyoqJyxcbiAgICAnICAgKiBSZWdpc3RlcnMgYWxsIHRoZSBidWlsdCBpbiByZWdpb25hbCBkYXRhIGluIHRoZSBSZWdpb25JbmZvIGRhdGFiYXNlLicsXG4gICAgJyAgICovJyxcbiAgICAnICBwdWJsaWMgc3RhdGljIHJlZ2lzdGVyKCk6IHZvaWQgeycsXG4gIF07XG5cbiAgY29uc3QgQVdTX09MREVSX1JFR0lPTlMgPSBuZXcgU2V0KFtcbiAgICAndXMtZWFzdC0xJyxcbiAgICAndXMtd2VzdC0xJyxcbiAgICAndXMtd2VzdC0yJyxcbiAgICAnYXAtc291dGhlYXN0LTEnLFxuICAgICdhcC1zb3V0aGVhc3QtMicsXG4gICAgJ2FwLW5vcnRoZWFzdC0xJyxcbiAgICAnc2EtZWFzdC0xJ1xuICBdKTtcblxuICBjb25zdCBBV1NfQ0RLX01FVEFEQVRBID0gbmV3IFNldChbXG4gICAgJ3VzLWVhc3QtMicsXG4gICAgJ3VzLWVhc3QtMScsXG4gICAgJ3VzLXdlc3QtMScsXG4gICAgJ3VzLXdlc3QtMicsXG4gICAgJ2FwLXNvdXRoLTEnLFxuICAgIC8vICdhcC1lYXN0LTEnLFxuICAgIC8vICdhcC1ub3J0aGVhc3QtMycsXG4gICAgJ2FwLW5vcnRoZWFzdC0yJyxcbiAgICAnYXAtc291dGhlYXN0LTEnLFxuICAgICdhcC1zb3V0aGVhc3QtMicsXG4gICAgJ2FwLW5vcnRoZWFzdC0xJyxcbiAgICAnY2EtY2VudHJhbC0xJyxcbiAgICAnY24tbm9ydGgtMScsXG4gICAgJ2NuLW5vcnRod2VzdC0xJyxcbiAgICAnZXUtY2VudHJhbC0xJyxcbiAgICAnZXUtd2VzdC0xJyxcbiAgICAnZXUtd2VzdC0yJyxcbiAgICAnZXUtd2VzdC0zJyxcbiAgICAnZXUtbm9ydGgtMScsXG4gICAgJ3NhLWVhc3QtMScsXG4gIF0pO1xuXG4gIGZvciAoY29uc3QgcmVnaW9uIG9mIEFXU19SRUdJT05TKSB7XG4gICAgY29uc3QgcGFydGl0aW9uID0gcmVnaW9uLnN0YXJ0c1dpdGgoJ2NuLScpID8gJ2F3cy1jbicgOiAnYXdzJztcbiAgICByZWdpc3RlckZhY3QocmVnaW9uLCAncGFydGl0aW9uJywgcGFydGl0aW9uKTtcblxuICAgIGNvbnN0IGRvbWFpblN1ZmZpeCA9IHBhcnRpdGlvbiA9PT0gJ2F3cycgPyAnYW1hem9uYXdzLmNvbScgOiAnYW1hem9uYXdzLmNvbS5jbic7XG4gICAgcmVnaXN0ZXJGYWN0KHJlZ2lvbiwgJ2RvbWFpblN1ZmZpeCcsIGRvbWFpblN1ZmZpeCk7XG5cbiAgICByZWdpc3RlckZhY3QocmVnaW9uLCAnY2RrTWV0YWRhdGFSZXNvdXJjZUF2YWlsYWJsZScsIEFXU19DREtfTUVUQURBVEEuaGFzKHJlZ2lvbikgPyAnWUVTJyA6ICdOTycpO1xuXG4gICAgcmVnaXN0ZXJGYWN0KHJlZ2lvbiwgJ3MzU3RhdGljV2Vic2l0ZUVuZHBvaW50JywgQVdTX09MREVSX1JFR0lPTlMuaGFzKHJlZ2lvbilcbiAgICAgID8gYHMzLXdlYnNpdGUtJHtyZWdpb259LiR7ZG9tYWluU3VmZml4fWBcbiAgICAgIDogYHMzLXdlYnNpdGUuJHtyZWdpb259LiR7ZG9tYWluU3VmZml4fWApO1xuXG4gICAgZm9yIChjb25zdCBzZXJ2aWNlIG9mIEFXU19TRVJWSUNFUykge1xuICAgICAgcmVnaXN0ZXJGYWN0KHJlZ2lvbiwgWydzZXJ2aWNlUHJpbmNpcGFsJywgc2VydmljZV0sIERlZmF1bHQuc2VydmljZVByaW5jaXBhbChzZXJ2aWNlLCByZWdpb24sIGRvbWFpblN1ZmZpeCkpO1xuICAgIH1cbiAgfVxuICBsaW5lcy5wdXNoKCcgIH0nKTtcbiAgbGluZXMucHVzaCgnJyk7XG4gIGxpbmVzLnB1c2goJyAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHt9JyksXG4gIGxpbmVzLnB1c2goJ30nKTtcblxuICBhd2FpdCBmcy53cml0ZUZpbGUocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uJywgJ2xpYicsICdidWlsdC1pbnMuZ2VuZXJhdGVkLnRzJyksIGxpbmVzLmpvaW4oJ1xcbicpKTtcblxuICBmdW5jdGlvbiByZWdpc3RlckZhY3QocmVnaW9uOiBzdHJpbmcsIG5hbWU6IHN0cmluZyB8IHN0cmluZ1tdLCB2YWx1ZTogc3RyaW5nKSB7XG4gICAgY29uc3QgZmFjdE5hbWUgPSB0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycgPyBuYW1lIDogYCR7bmFtZVswXX0oJHtuYW1lLnNsaWNlKDEpLm1hcChzID0+IEpTT04uc3RyaW5naWZ5KHMpKS5qb2luKCcsICcpfSlgO1xuICAgIGxpbmVzLnB1c2goYCAgICBGYWN0LnJlZ2lzdGVyKHsgcmVnaW9uOiAke0pTT04uc3RyaW5naWZ5KHJlZ2lvbil9LCBuYW1lOiBGYWN0TmFtZS4ke2ZhY3ROYW1lfSwgdmFsdWU6ICR7SlNPTi5zdHJpbmdpZnkodmFsdWUpfSB9KTtgKTtcbiAgfVxufVxuXG5tYWluKCkuY2F0Y2goZSA9PiB7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tY29uc29sZVxuICBjb25zb2xlLmVycm9yKGUpO1xuICBwcm9jZXNzLmV4aXQoLTEpO1xufSk7XG4iXX0=