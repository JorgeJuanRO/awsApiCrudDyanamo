"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assets = require("@aws-cdk/assets");
const s3 = require("@aws-cdk/aws-s3");
const cdk = require("@aws-cdk/cdk");
const cxapi = require("@aws-cdk/cx-api");
const fs = require("fs");
const path = require("path");
const ARCHIVE_EXTENSIONS = ['.zip', '.jar'];
/**
 * Defines the way an asset is packaged before it is uploaded to S3.
 */
var AssetPackaging;
(function (AssetPackaging) {
    /**
     * Path refers to a directory on disk, the contents of the directory is
     * archived into a .zip.
     */
    AssetPackaging["ZipDirectory"] = "zip";
    /**
     * Path refers to a single file on disk. The file is uploaded as-is.
     */
    AssetPackaging["File"] = "file";
})(AssetPackaging = exports.AssetPackaging || (exports.AssetPackaging = {}));
/**
 * An asset represents a local file or directory, which is automatically uploaded to S3
 * and then can be referenced within a CDK application.
 */
class Asset extends cdk.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        // stage the asset source (conditionally).
        const staging = new assets.Staging(this, 'Stage', {
            ...props,
            sourcePath: path.resolve(props.path),
        });
        this.sourceHash = staging.sourceHash;
        this.assetPath = staging.stagedPath;
        const packaging = determinePackaging(staging.sourcePath);
        // sets isZipArchive based on the type of packaging and file extension
        this.isZipArchive = packaging === AssetPackaging.ZipDirectory
            ? true
            : ARCHIVE_EXTENSIONS.some(ext => staging.sourcePath.toLowerCase().endsWith(ext));
        // add parameters for s3 bucket and s3 key. those will be set by
        // the toolkit or by CI/CD when the stack is deployed and will include
        // the name of the bucket and the S3 key where the code lives.
        const bucketParam = new cdk.CfnParameter(this, 'S3Bucket', {
            type: 'String',
            description: `S3 bucket for asset "${this.node.path}"`,
        });
        const keyParam = new cdk.CfnParameter(this, 'S3VersionKey', {
            type: 'String',
            description: `S3 key for asset version "${this.node.path}"`
        });
        const hashParam = new cdk.CfnParameter(this, 'ArtifactHash', {
            description: `Artifact hash for asset "${this.node.path}"`,
            type: 'String',
        });
        this.s3BucketName = bucketParam.valueAsString;
        this.s3Prefix = cdk.Fn.select(0, cdk.Fn.split(cxapi.ASSET_PREFIX_SEPARATOR, keyParam.valueAsString)).toString();
        const s3Filename = cdk.Fn.select(1, cdk.Fn.split(cxapi.ASSET_PREFIX_SEPARATOR, keyParam.valueAsString)).toString();
        this.s3ObjectKey = `${this.s3Prefix}${s3Filename}`;
        this.artifactHash = hashParam.valueAsString;
        this.bucket = s3.Bucket.fromBucketName(this, 'AssetBucket', this.s3BucketName);
        // form the s3 URL of the object key
        this.s3Url = this.bucket.urlForObject(this.s3ObjectKey);
        // attach metadata to the lambda function which includes information
        // for tooling to be able to package and upload a directory to the
        // s3 bucket and plug in the bucket name and key in the correct
        // parameters.
        const asset = {
            path: this.assetPath,
            id: this.node.uniqueId,
            packaging,
            sourceHash: this.sourceHash,
            s3BucketParameter: bucketParam.logicalId,
            s3KeyParameter: keyParam.logicalId,
            artifactHashParameter: hashParam.logicalId,
        };
        this.node.addMetadata(cxapi.ASSET_METADATA, asset);
        for (const reader of (props.readers || [])) {
            this.grantRead(reader);
        }
    }
    /**
     * Adds CloudFormation template metadata to the specified resource with
     * information that indicates which resource property is mapped to this local
     * asset. This can be used by tools such as SAM CLI to provide local
     * experience such as local invocation and debugging of Lambda functions.
     *
     * Asset metadata will only be included if the stack is synthesized with the
     * "aws:cdk:enable-asset-metadata" context key defined, which is the default
     * behavior when synthesizing via the CDK Toolkit.
     *
     * @see https://github.com/awslabs/aws-cdk/issues/1432
     *
     * @param resource The CloudFormation resource which is using this asset [disable-awslint:ref-via-interface]
     * @param resourceProperty The property name where this asset is referenced
     * (e.g. "Code" for AWS::Lambda::Function)
     */
    addResourceMetadata(resource, resourceProperty) {
        if (!this.node.tryGetContext(cxapi.ASSET_RESOURCE_METADATA_ENABLED_CONTEXT)) {
            return; // not enabled
        }
        // tell tools such as SAM CLI that the "Code" property of this resource
        // points to a local path in order to enable local invocation of this function.
        resource.options.metadata = resource.options.metadata || {};
        resource.options.metadata[cxapi.ASSET_RESOURCE_METADATA_PATH_KEY] = this.assetPath;
        resource.options.metadata[cxapi.ASSET_RESOURCE_METADATA_PROPERTY_KEY] = resourceProperty;
    }
    /**
     * Grants read permissions to the principal on the asset's S3 object.
     */
    grantRead(grantee) {
        // We give permissions on all files with the same prefix. Presumably
        // different versions of the same file will have the same prefix
        // and we don't want to accidentally revoke permission on old versions
        // when deploying a new version.
        this.bucket.grantRead(grantee, `${this.s3Prefix}*`);
    }
}
exports.Asset = Asset;
function determinePackaging(assetPath) {
    if (!fs.existsSync(assetPath)) {
        throw new Error(`Cannot find asset at ${assetPath}`);
    }
    if (fs.statSync(assetPath).isDirectory()) {
        return AssetPackaging.ZipDirectory;
    }
    if (fs.statSync(assetPath).isFile()) {
        return AssetPackaging.File;
    }
    throw new Error(`Asset ${assetPath} is expected to be either a directory or a regular file`);
}
//# sourceMappingURL=data:application/json;base64,