#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sns = require("@aws-cdk/aws-sns");
const ssm = require("@aws-cdk/aws-ssm");
const cdk = require("@aws-cdk/cdk");
const lib_1 = require("../lib");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'aws-cdk-sdk-js');
const topic = new sns.Topic(stack, 'Topic');
const snsPublish = new lib_1.AwsCustomResource(stack, 'Publish', {
    onUpdate: {
        service: 'SNS',
        action: 'publish',
        parameters: {
            Message: 'hello',
            TopicArn: topic.topicArn
        },
        physicalResourceId: topic.topicArn,
    }
});
const listTopics = new lib_1.AwsCustomResource(stack, 'ListTopics', {
    onUpdate: {
        service: 'SNS',
        action: 'listTopics',
        physicalResourceIdPath: 'Topics.0.TopicArn'
    }
});
listTopics.node.addDependency(topic);
const ssmParameter = new ssm.StringParameter(stack, 'DummyParameter', {
    stringValue: '1337',
});
const getParameter = new lib_1.AwsCustomResource(stack, 'GetParameter', {
    onUpdate: {
        service: 'SSM',
        action: 'getParameter',
        parameters: {
            Name: ssmParameter.parameterName,
            WithDecryption: true
        },
        physicalResourceIdPath: 'Parameter.ARN'
    }
});
new cdk.CfnOutput(stack, 'MessageId', { value: snsPublish.getData('MessageId') });
new cdk.CfnOutput(stack, 'TopicArn', { value: listTopics.getData('Topics.0.TopicArn') });
new cdk.CfnOutput(stack, 'ParameterValue', { value: getParameter.getData('Parameter.Value') });
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuYXdzLWN1c3RvbS1yZXNvdXJjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludGVnLmF3cy1jdXN0b20tcmVzb3VyY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0Esd0NBQXlDO0FBQ3pDLHdDQUF5QztBQUN6QyxvQ0FBcUM7QUFDckMsZ0NBQTJDO0FBRTNDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBRTFCLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztBQUVuRCxNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBRTVDLE1BQU0sVUFBVSxHQUFHLElBQUksdUJBQWlCLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRTtJQUN6RCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsS0FBSztRQUNkLE1BQU0sRUFBRSxTQUFTO1FBQ2pCLFVBQVUsRUFBRTtZQUNWLE9BQU8sRUFBRSxPQUFPO1lBQ2hCLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtTQUN6QjtRQUNELGtCQUFrQixFQUFFLEtBQUssQ0FBQyxRQUFRO0tBQ25DO0NBQ0YsQ0FBQyxDQUFDO0FBRUgsTUFBTSxVQUFVLEdBQUcsSUFBSSx1QkFBaUIsQ0FBQyxLQUFLLEVBQUUsWUFBWSxFQUFFO0lBQzVELFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxLQUFLO1FBQ2QsTUFBTSxFQUFFLFlBQVk7UUFDcEIsc0JBQXNCLEVBQUUsbUJBQW1CO0tBQzVDO0NBQ0YsQ0FBQyxDQUFDO0FBQ0gsVUFBVSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7QUFFckMsTUFBTSxZQUFZLEdBQUcsSUFBSSxHQUFHLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxnQkFBZ0IsRUFBRTtJQUNwRSxXQUFXLEVBQUUsTUFBTTtDQUNwQixDQUFDLENBQUM7QUFDSCxNQUFNLFlBQVksR0FBRyxJQUFJLHVCQUFpQixDQUFDLEtBQUssRUFBRSxjQUFjLEVBQUU7SUFDaEUsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLEtBQUs7UUFDZCxNQUFNLEVBQUUsY0FBYztRQUN0QixVQUFVLEVBQUU7WUFDVixJQUFJLEVBQUUsWUFBWSxDQUFDLGFBQWE7WUFDaEMsY0FBYyxFQUFFLElBQUk7U0FDckI7UUFDRCxzQkFBc0IsRUFBRSxlQUFlO0tBQ3hDO0NBQ0YsQ0FBQyxDQUFDO0FBRUgsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxXQUFXLEVBQUUsRUFBRSxLQUFLLEVBQUUsVUFBVSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDbEYsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxVQUFVLEVBQUUsRUFBRSxLQUFLLEVBQUUsVUFBVSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN6RixJQUFJLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLGdCQUFnQixFQUFFLEVBQUUsS0FBSyxFQUFFLFlBQVksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDLENBQUM7QUFFL0YsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxuaW1wb3J0IHNucyA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1zbnMnKTtcbmltcG9ydCBzc20gPSByZXF1aXJlKCdAYXdzLWNkay9hd3Mtc3NtJyk7XG5pbXBvcnQgY2RrID0gcmVxdWlyZSgnQGF3cy1jZGsvY2RrJyk7XG5pbXBvcnQgeyBBd3NDdXN0b21SZXNvdXJjZSB9IGZyb20gJy4uL2xpYic7XG5cbmNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG5cbmNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjayhhcHAsICdhd3MtY2RrLXNkay1qcycpO1xuXG5jb25zdCB0b3BpYyA9IG5ldyBzbnMuVG9waWMoc3RhY2ssICdUb3BpYycpO1xuXG5jb25zdCBzbnNQdWJsaXNoID0gbmV3IEF3c0N1c3RvbVJlc291cmNlKHN0YWNrLCAnUHVibGlzaCcsIHtcbiAgb25VcGRhdGU6IHtcbiAgICBzZXJ2aWNlOiAnU05TJyxcbiAgICBhY3Rpb246ICdwdWJsaXNoJyxcbiAgICBwYXJhbWV0ZXJzOiB7XG4gICAgICBNZXNzYWdlOiAnaGVsbG8nLFxuICAgICAgVG9waWNBcm46IHRvcGljLnRvcGljQXJuXG4gICAgfSxcbiAgICBwaHlzaWNhbFJlc291cmNlSWQ6IHRvcGljLnRvcGljQXJuLFxuICB9XG59KTtcblxuY29uc3QgbGlzdFRvcGljcyA9IG5ldyBBd3NDdXN0b21SZXNvdXJjZShzdGFjaywgJ0xpc3RUb3BpY3MnLCB7XG4gIG9uVXBkYXRlOiB7XG4gICAgc2VydmljZTogJ1NOUycsXG4gICAgYWN0aW9uOiAnbGlzdFRvcGljcycsXG4gICAgcGh5c2ljYWxSZXNvdXJjZUlkUGF0aDogJ1RvcGljcy4wLlRvcGljQXJuJ1xuICB9XG59KTtcbmxpc3RUb3BpY3Mubm9kZS5hZGREZXBlbmRlbmN5KHRvcGljKTtcblxuY29uc3Qgc3NtUGFyYW1ldGVyID0gbmV3IHNzbS5TdHJpbmdQYXJhbWV0ZXIoc3RhY2ssICdEdW1teVBhcmFtZXRlcicsIHtcbiAgc3RyaW5nVmFsdWU6ICcxMzM3Jyxcbn0pO1xuY29uc3QgZ2V0UGFyYW1ldGVyID0gbmV3IEF3c0N1c3RvbVJlc291cmNlKHN0YWNrLCAnR2V0UGFyYW1ldGVyJywge1xuICBvblVwZGF0ZToge1xuICAgIHNlcnZpY2U6ICdTU00nLFxuICAgIGFjdGlvbjogJ2dldFBhcmFtZXRlcicsXG4gICAgcGFyYW1ldGVyczoge1xuICAgICAgTmFtZTogc3NtUGFyYW1ldGVyLnBhcmFtZXRlck5hbWUsXG4gICAgICBXaXRoRGVjcnlwdGlvbjogdHJ1ZVxuICAgIH0sXG4gICAgcGh5c2ljYWxSZXNvdXJjZUlkUGF0aDogJ1BhcmFtZXRlci5BUk4nXG4gIH1cbn0pO1xuXG5uZXcgY2RrLkNmbk91dHB1dChzdGFjaywgJ01lc3NhZ2VJZCcsIHsgdmFsdWU6IHNuc1B1Ymxpc2guZ2V0RGF0YSgnTWVzc2FnZUlkJykgfSk7XG5uZXcgY2RrLkNmbk91dHB1dChzdGFjaywgJ1RvcGljQXJuJywgeyB2YWx1ZTogbGlzdFRvcGljcy5nZXREYXRhKCdUb3BpY3MuMC5Ub3BpY0FybicpIH0pO1xubmV3IGNkay5DZm5PdXRwdXQoc3RhY2ssICdQYXJhbWV0ZXJWYWx1ZScsIHsgdmFsdWU6IGdldFBhcmFtZXRlci5nZXREYXRhKCdQYXJhbWV0ZXIuVmFsdWUnKSB9KTtcblxuYXBwLnN5bnRoKCk7XG4iXX0=