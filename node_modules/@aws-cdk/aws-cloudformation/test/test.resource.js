"use strict";
const assert_1 = require("@aws-cdk/assert");
const lambda = require("@aws-cdk/aws-lambda");
const sns = require("@aws-cdk/aws-sns");
const cdk = require("@aws-cdk/cdk");
const nodeunit_1 = require("nodeunit");
const lib_1 = require("../lib");
class TestCustomResource extends cdk.Construct {
    constructor(scope, id, opts = {}) {
        super(scope, id);
        const singletonLambda = new lambda.SingletonFunction(this, 'Lambda', {
            uuid: 'TestCustomResourceProvider',
            code: new lambda.InlineCode('def hello(): pass'),
            runtime: lambda.Runtime.Python27,
            handler: 'index.hello',
            timeout: 300,
        });
        new lib_1.CustomResource(this, 'Resource', {
            ...opts,
            provider: lib_1.CustomResourceProvider.lambda(singletonLambda),
        });
    }
}
module.exports = nodeunit_1.testCase({
    'custom resources honor removalPolicy': {
        'unspecified (aka .Destroy)'(test) {
            // GIVEN
            const app = new cdk.App();
            const stack = new cdk.Stack(app, 'Test');
            // WHEN
            new TestCustomResource(stack, 'Custom');
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource('AWS::CloudFormation::CustomResource', {}, assert_1.ResourcePart.CompleteDefinition));
            test.equal(app.synth().tryGetArtifact(stack.stackName).findMetadataByType('aws:cdk:protected').length, 0);
            test.done();
        },
        '.Destroy'(test) {
            // GIVEN
            const app = new cdk.App();
            const stack = new cdk.Stack(app, 'Test');
            // WHEN
            new TestCustomResource(stack, 'Custom', { removalPolicy: cdk.RemovalPolicy.Destroy });
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource('AWS::CloudFormation::CustomResource', {}, assert_1.ResourcePart.CompleteDefinition));
            test.equal(app.synth().tryGetArtifact(stack.stackName).findMetadataByType('aws:cdk:protected').length, 0);
            test.done();
        },
        '.Retain'(test) {
            // GIVEN
            const app = new cdk.App();
            const stack = new cdk.Stack(app, 'Test');
            // WHEN
            new TestCustomResource(stack, 'Custom', { removalPolicy: cdk.RemovalPolicy.Retain });
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource('AWS::CloudFormation::CustomResource', {
                DeletionPolicy: 'Retain',
            }, assert_1.ResourcePart.CompleteDefinition));
            test.done();
        },
    },
    'custom resource is added twice, lambda is added once'(test) {
        // GIVEN
        const app = new cdk.App();
        const stack = new cdk.Stack(app, 'Test');
        // WHEN
        new TestCustomResource(stack, 'Custom1');
        new TestCustomResource(stack, 'Custom2');
        // THEN
        assert_1.expect(stack).toMatch({
            "Resources": {
                "SingletonLambdaTestCustomResourceProviderServiceRole81FEAB5C": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                        "AssumeRolePolicyDocument": {
                            "Statement": [
                                {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": {
                                        "Service": { "Fn::Join": ["", ["lambda.", { Ref: "AWS::URLSuffix" }]] }
                                    }
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "ManagedPolicyArns": [
                            { "Fn::Join": ["", [
                                        "arn:", { "Ref": "AWS::Partition" }, ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                                    ]] }
                        ]
                    }
                },
                "SingletonLambdaTestCustomResourceProviderA9255269": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                        "Code": {
                            "ZipFile": "def hello(): pass"
                        },
                        "Handler": "index.hello",
                        "Role": {
                            "Fn::GetAtt": [
                                "SingletonLambdaTestCustomResourceProviderServiceRole81FEAB5C",
                                "Arn"
                            ]
                        },
                        "Runtime": "python2.7",
                        "Timeout": 300
                    },
                    "DependsOn": [
                        "SingletonLambdaTestCustomResourceProviderServiceRole81FEAB5C"
                    ]
                },
                "Custom1D319B237": {
                    "Type": "AWS::CloudFormation::CustomResource",
                    "DeletionPolicy": "Delete",
                    "Properties": {
                        "ServiceToken": {
                            "Fn::GetAtt": [
                                "SingletonLambdaTestCustomResourceProviderA9255269",
                                "Arn"
                            ]
                        }
                    }
                },
                "Custom2DD5FB44D": {
                    "Type": "AWS::CloudFormation::CustomResource",
                    "DeletionPolicy": "Delete",
                    "Properties": {
                        "ServiceToken": {
                            "Fn::GetAtt": [
                                "SingletonLambdaTestCustomResourceProviderA9255269",
                                "Arn"
                            ]
                        }
                    }
                }
            }
        });
        test.done();
    },
    'custom resources can specify a resource type that starts with Custom::'(test) {
        const app = new cdk.App();
        const stack = new cdk.Stack(app, 'Test');
        new lib_1.CustomResource(stack, 'MyCustomResource', {
            resourceType: 'Custom::MyCustomResourceType',
            provider: lib_1.CustomResourceProvider.topic(new sns.Topic(stack, 'Provider'))
        });
        assert_1.expect(stack).to(assert_1.haveResource('Custom::MyCustomResourceType'));
        test.done();
    },
    'fails if custom resource type is invalid': {
        'does not start with "Custom::"'(test) {
            const app = new cdk.App();
            const stack = new cdk.Stack(app, 'Test');
            test.throws(() => {
                new lib_1.CustomResource(stack, 'MyCustomResource', {
                    resourceType: 'NoCustom::MyCustomResourceType',
                    provider: lib_1.CustomResourceProvider.topic(new sns.Topic(stack, 'Provider'))
                });
            }, /Custom resource type must begin with "Custom::"/);
            test.done();
        },
        'has invalid characters'(test) {
            const app = new cdk.App();
            const stack = new cdk.Stack(app, 'Test');
            test.throws(() => {
                new lib_1.CustomResource(stack, 'MyCustomResource', {
                    resourceType: 'Custom::My Custom?ResourceType',
                    provider: lib_1.CustomResourceProvider.topic(new sns.Topic(stack, 'Provider'))
                });
            }, /Custom resource type name can only include alphanumeric characters and/);
            test.done();
        },
        'is longer than 60 characters'(test) {
            const app = new cdk.App();
            const stack = new cdk.Stack(app, 'Test');
            test.throws(() => {
                new lib_1.CustomResource(stack, 'MyCustomResource', {
                    resourceType: 'Custom::0123456789012345678901234567890123456789012345678901234567891',
                    provider: lib_1.CustomResourceProvider.topic(new sns.Topic(stack, 'Provider'))
                });
            }, /Custom resource type length > 60/);
            test.done();
        },
    },
});
//# sourceMappingURL=data:application/json;base64,