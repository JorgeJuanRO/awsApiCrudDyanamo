"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const iam = require("@aws-cdk/aws-iam");
const lambda = require("@aws-cdk/aws-lambda");
const cdk = require("@aws-cdk/cdk");
const metadata = require("aws-sdk/apis/metadata.json");
const path = require("path");
const custom_resource_1 = require("./custom-resource");
const awsSdkMetadata = metadata;
class AwsCustomResource extends cdk.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        if (!props.onCreate && !props.onUpdate && !props.onDelete) {
            throw new Error('At least `onCreate`, `onUpdate` or `onDelete` must be specified.');
        }
        for (const call of [props.onCreate, props.onUpdate]) {
            if (call && !call.physicalResourceId && !call.physicalResourceIdPath) {
                throw new Error('Either `physicalResourceId` or `physicalResourceIdPath` must be specified for onCreate and onUpdate calls.');
            }
        }
        const provider = new lambda.SingletonFunction(this, 'Provider', {
            code: lambda.Code.asset(path.join(__dirname, 'aws-custom-resource-provider')),
            runtime: lambda.Runtime.Nodejs10x,
            handler: 'index.handler',
            uuid: '679f53fa-c002-430c-b0da-5b7982bd2287',
            lambdaPurpose: 'AWS'
        });
        if (props.policyStatements) {
            for (const statement of props.policyStatements) {
                provider.addToRolePolicy(statement);
            }
        }
        else { // Derive statements from AWS SDK calls
            for (const call of [props.onCreate, props.onUpdate, props.onDelete]) {
                if (call) {
                    provider.addToRolePolicy(new iam.PolicyStatement({
                        actions: [awsSdkToIamAction(call.service, call.action)],
                        resources: ['*']
                    }));
                }
            }
        }
        this.customResource = new custom_resource_1.CustomResource(this, 'Resource', {
            resourceType: 'Custom::AWS',
            provider: custom_resource_1.CustomResourceProvider.lambda(provider),
            properties: {
                create: props.onCreate || props.onUpdate,
                update: props.onUpdate,
                delete: props.onDelete
            }
        });
    }
    /**
     * Returns response data for the AWS SDK call.
     *
     * Example for S3 / listBucket : 'Buckets.0.Name'
     *
     * @param dataPath the path to the data
     */
    getData(dataPath) {
        return this.customResource.getAtt(dataPath);
    }
}
exports.AwsCustomResource = AwsCustomResource;
/**
 * Transform SDK service/action to IAM action using metadata from aws-sdk module.
 * Example: CloudWatchLogs with putRetentionPolicy => logs:PutRetentionPolicy
 *
 * TODO: is this mapping correct for all services?
 */
function awsSdkToIamAction(service, action) {
    const srv = service.toLowerCase();
    const iamService = awsSdkMetadata[srv].prefix || srv;
    const iamAction = action.charAt(0).toUpperCase() + action.slice(1);
    return `${iamService}:${iamAction}`;
}
//# sourceMappingURL=data:application/json;base64,