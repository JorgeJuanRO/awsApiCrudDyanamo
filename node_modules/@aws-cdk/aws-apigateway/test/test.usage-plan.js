"use strict";
const assert_1 = require("@aws-cdk/assert");
const cdk = require("@aws-cdk/cdk");
const apigateway = require("../lib");
const RESOURCE_TYPE = 'AWS::ApiGateway::UsagePlan';
module.exports = {
    'default setup'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const api = new apigateway.RestApi(stack, 'my-api', { cloudWatchRole: false, deploy: false });
        api.root.addMethod('GET'); // Need at least one method on the api
        const usagePlanName = 'Pro';
        const usagePlanDescription = 'Pro Usage Plan with no throttling limits';
        // WHEN
        new apigateway.UsagePlan(stack, 'my-usage-plan', {
            name: usagePlanName,
            description: usagePlanDescription
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource(RESOURCE_TYPE, {
            UsagePlanName: usagePlanName,
            Description: usagePlanDescription
        }, assert_1.ResourcePart.Properties));
        test.done();
    },
    'usage plan with throttling limits'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const api = new apigateway.RestApi(stack, 'my-api', { cloudWatchRole: false, deploy: true, deployOptions: { stageName: 'test' } });
        const method = api.root.addMethod('GET'); // Need at least one method on the api
        const usagePlanName = 'Basic';
        const usagePlanDescription = 'Basic Usage Plan with no throttling limits';
        // WHEN
        new apigateway.UsagePlan(stack, 'my-usage-plan', {
            name: usagePlanName,
            description: usagePlanDescription,
            apiStages: [
                {
                    stage: api.deploymentStage,
                    throttle: [
                        {
                            method,
                            throttle: {
                                burstLimit: 20,
                                rateLimit: 10
                            }
                        }
                    ]
                }
            ]
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource(RESOURCE_TYPE, {
            UsagePlanName: usagePlanName,
            Description: usagePlanDescription,
            ApiStages: [
                {
                    ApiId: {
                        Ref: 'myapi4C7BF186'
                    },
                    Stage: {
                        Ref: 'myapiDeploymentStagetest4A4AB65E'
                    },
                    Throttle: {
                        '//GET': {
                            BurstLimit: 20,
                            RateLimit: 10
                        }
                    }
                }
            ]
        }, assert_1.ResourcePart.Properties));
        test.done();
    },
    'usage plan with quota limits'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new apigateway.UsagePlan(stack, 'my-usage-plan', {
            quota: {
                limit: 10000,
                period: apigateway.Period.Month
            }
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource(RESOURCE_TYPE, {
            Quota: {
                Limit: 10000,
                Period: 'MONTH'
            }
        }, assert_1.ResourcePart.Properties));
        test.done();
    },
    'UsagePlanKey'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const usagePlan = new apigateway.UsagePlan(stack, 'my-usage-plan', {
            name: 'Basic',
        });
        const apiKey = new apigateway.ApiKey(stack, 'my-api-key');
        // WHEN
        usagePlan.addApiKey(apiKey);
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::ApiGateway::UsagePlanKey', {
            KeyId: {
                Ref: 'myapikey1B052F70'
            },
            KeyType: 'API_KEY',
            UsagePlanId: {
                Ref: 'myusageplan23AA1E32'
            }
        }, assert_1.ResourcePart.Properties));
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,