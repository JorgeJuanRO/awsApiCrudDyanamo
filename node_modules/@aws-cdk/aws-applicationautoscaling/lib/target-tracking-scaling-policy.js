"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/cdk");
const applicationautoscaling_generated_1 = require("./applicationautoscaling.generated");
class TargetTrackingScalingPolicy extends cdk.Construct {
    constructor(scope, id, props) {
        if ((props.customMetric === undefined) === (props.predefinedMetric === undefined)) {
            throw new Error(`Exactly one of 'customMetric' or 'predefinedMetric' must be specified.`);
        }
        if (props.scaleInCooldownSec !== undefined && props.scaleInCooldownSec < 0) {
            throw new RangeError(`scaleInCooldown cannot be negative, got: ${props.scaleInCooldownSec}`);
        }
        if (props.scaleOutCooldownSec !== undefined && props.scaleOutCooldownSec < 0) {
            throw new RangeError(`scaleOutCooldown cannot be negative, got: ${props.scaleOutCooldownSec}`);
        }
        super(scope, id);
        const resource = new applicationautoscaling_generated_1.CfnScalingPolicy(this, 'Resource', {
            policyName: props.policyName || this.node.uniqueId,
            policyType: 'TargetTrackingScaling',
            scalingTargetId: props.scalingTarget.scalableTargetId,
            targetTrackingScalingPolicyConfiguration: {
                customizedMetricSpecification: renderCustomMetric(props.customMetric),
                disableScaleIn: props.disableScaleIn,
                predefinedMetricSpecification: props.predefinedMetric !== undefined ? {
                    predefinedMetricType: props.predefinedMetric,
                    resourceLabel: props.resourceLabel,
                } : undefined,
                scaleInCooldown: props.scaleInCooldownSec,
                scaleOutCooldown: props.scaleOutCooldownSec,
                targetValue: props.targetValue
            }
        });
        this.scalingPolicyArn = resource.refAsString;
    }
}
exports.TargetTrackingScalingPolicy = TargetTrackingScalingPolicy;
function renderCustomMetric(metric) {
    if (!metric) {
        return undefined;
    }
    const c = metric.toAlarmConfig();
    if (!c.statistic) {
        throw new Error('Can only use Average, Minimum, Maximum, SampleCount, Sum statistic for target tracking');
    }
    return {
        dimensions: c.dimensions,
        metricName: c.metricName,
        namespace: c.namespace,
        statistic: c.statistic,
        unit: c.unit
    };
}
/**
 * One of the predefined autoscaling metrics
 */
var PredefinedMetric;
(function (PredefinedMetric) {
    PredefinedMetric["DynamoDBReadCapacityUtilization"] = "DynamoDBReadCapacityUtilization";
    PredefinedMetric["DynamoDBWriteCapacityUtilization"] = "DynamoDBWriteCapacityUtilization";
    PredefinedMetric["ALBRequestCountPerTarget"] = "ALBRequestCountPerTarget";
    PredefinedMetric["RDSReaderAverageCPUUtilization"] = "RDSReaderAverageCPUUtilization";
    PredefinedMetric["RDSReaderAverageDatabaseConnections"] = "RDSReaderAverageDatabaseConnections";
    PredefinedMetric["EC2SpotFleetRequestAverageCPUUtilization"] = "EC2SpotFleetRequestAverageCPUUtilization";
    PredefinedMetric["EC2SpotFleetRequestAverageNetworkIn"] = "EC2SpotFleetRequestAverageNetworkIn";
    PredefinedMetric["EC2SpotFleetRequestAverageNetworkOut"] = "EC2SpotFleetRequestAverageNetworkOut";
    PredefinedMetric["SageMakerVariantInvocationsPerInstance"] = "SageMakerVariantInvocationsPerInstance";
    PredefinedMetric["ECSServiceAverageCPUUtilization"] = "ECSServiceAverageCPUUtilization";
    PredefinedMetric["ECSServiceAverageMemoryUtilization"] = "ECSServiceAverageMemoryUtilization";
})(PredefinedMetric = exports.PredefinedMetric || (exports.PredefinedMetric = {}));
//# sourceMappingURL=data:application/json;base64,