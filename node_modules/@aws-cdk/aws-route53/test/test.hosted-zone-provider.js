"use strict";
const assert_1 = require("@aws-cdk/assert");
const cdk = require("@aws-cdk/cdk");
const lib_1 = require("../lib");
module.exports = {
    'Hosted Zone Provider': {
        'HostedZoneProvider will return context values if availble'(test) {
            // GIVEN
            const stack = new cdk.Stack(undefined, 'TestStack', { env: { account: '12345', region: 'us-east-1' } });
            const filter = { domainName: 'test.com' };
            new lib_1.HostedZoneProvider(stack, filter).findHostedZone();
            const missing = assert_1.SynthUtils.synthesize(stack).assembly.manifest.missing;
            test.ok(missing && missing.length === 1);
            const fakeZone = {
                Id: "/hostedzone/11111111111111",
                Name: "example.com.",
                CallerReference: "TestLates-PublicZo-OESZPDFV7G6A",
                Config: {
                    Comment: "CDK created",
                    PrivateZone: false
                },
                ResourceRecordSetCount: 3
            };
            stack.node.setContext(missing[0].key, fakeZone);
            const cdkZoneProps = {
                hostedZoneId: fakeZone.Id,
                zoneName: 'example.com',
            };
            const cdkZone = lib_1.HostedZone.fromHostedZoneAttributes(stack, 'MyZone', cdkZoneProps);
            // WHEN
            const provider = new lib_1.HostedZoneProvider(stack, filter);
            const zoneProps = stack.resolve(provider.findHostedZone());
            const zoneRef = provider.findAndImport(stack, 'MyZoneProvider');
            // THEN
            test.deepEqual(zoneProps, cdkZoneProps);
            test.deepEqual(zoneRef.hostedZoneId, cdkZone.hostedZoneId);
            test.done();
        },
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5ob3N0ZWQtem9uZS1wcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRlc3QuaG9zdGVkLXpvbmUtcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDRDQUE2QztBQUM3QyxvQ0FBcUM7QUFFckMsZ0NBQThFO0FBRTlFLGlCQUFTO0lBQ1Asc0JBQXNCLEVBQUU7UUFDdEIsMkRBQTJELENBQUMsSUFBVTtZQUNwRSxRQUFRO1lBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxXQUFXLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDeEcsTUFBTSxNQUFNLEdBQUcsRUFBQyxVQUFVLEVBQUUsVUFBVSxFQUFDLENBQUM7WUFDeEMsSUFBSSx3QkFBa0IsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7WUFFdkQsTUFBTSxPQUFPLEdBQUcsbUJBQVUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxPQUFRLENBQUM7WUFDeEUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQztZQUV6QyxNQUFNLFFBQVEsR0FBRztnQkFDZixFQUFFLEVBQUUsNEJBQTRCO2dCQUNoQyxJQUFJLEVBQUUsY0FBYztnQkFDcEIsZUFBZSxFQUFFLGlDQUFpQztnQkFDbEQsTUFBTSxFQUFFO29CQUNOLE9BQU8sRUFBRSxhQUFhO29CQUN0QixXQUFXLEVBQUUsS0FBSztpQkFDbkI7Z0JBQ0Qsc0JBQXNCLEVBQUUsQ0FBQzthQUMxQixDQUFDO1lBRUYsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUVoRCxNQUFNLFlBQVksR0FBeUI7Z0JBQ3pDLFlBQVksRUFBRSxRQUFRLENBQUMsRUFBRTtnQkFDekIsUUFBUSxFQUFFLGFBQWE7YUFDeEIsQ0FBQztZQUVGLE1BQU0sT0FBTyxHQUFHLGdCQUFVLENBQUMsd0JBQXdCLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxZQUFZLENBQUMsQ0FBQztZQUVuRixPQUFPO1lBQ1AsTUFBTSxRQUFRLEdBQUcsSUFBSSx3QkFBa0IsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDdkQsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQztZQUMzRCxNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1lBRWhFLE9BQU87WUFDUCxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUMsQ0FBQztZQUN4QyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzNELElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNkLENBQUM7S0FDRjtDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTeW50aFV0aWxzIH0gZnJvbSAnQGF3cy1jZGsvYXNzZXJ0JztcbmltcG9ydCBjZGsgPSByZXF1aXJlKCdAYXdzLWNkay9jZGsnKTtcbmltcG9ydCB7IFRlc3QgfSBmcm9tICdub2RldW5pdCc7XG5pbXBvcnQgeyBIb3N0ZWRab25lLCBIb3N0ZWRab25lQXR0cmlidXRlcywgSG9zdGVkWm9uZVByb3ZpZGVyIH0gZnJvbSAnLi4vbGliJztcblxuZXhwb3J0ID0ge1xuICAnSG9zdGVkIFpvbmUgUHJvdmlkZXInOiB7XG4gICAgJ0hvc3RlZFpvbmVQcm92aWRlciB3aWxsIHJldHVybiBjb250ZXh0IHZhbHVlcyBpZiBhdmFpbGJsZScodGVzdDogVGVzdCkge1xuICAgICAgLy8gR0lWRU5cbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjayh1bmRlZmluZWQsICdUZXN0U3RhY2snLCB7IGVudjogeyBhY2NvdW50OiAnMTIzNDUnLCByZWdpb246ICd1cy1lYXN0LTEnIH0gfSk7XG4gICAgICBjb25zdCBmaWx0ZXIgPSB7ZG9tYWluTmFtZTogJ3Rlc3QuY29tJ307XG4gICAgICBuZXcgSG9zdGVkWm9uZVByb3ZpZGVyKHN0YWNrLCBmaWx0ZXIpLmZpbmRIb3N0ZWRab25lKCk7XG5cbiAgICAgIGNvbnN0IG1pc3NpbmcgPSBTeW50aFV0aWxzLnN5bnRoZXNpemUoc3RhY2spLmFzc2VtYmx5Lm1hbmlmZXN0Lm1pc3NpbmchO1xuICAgICAgdGVzdC5vayhtaXNzaW5nICYmIG1pc3NpbmcubGVuZ3RoID09PSAxKTtcblxuICAgICAgY29uc3QgZmFrZVpvbmUgPSB7XG4gICAgICAgIElkOiBcIi9ob3N0ZWR6b25lLzExMTExMTExMTExMTExXCIsXG4gICAgICAgIE5hbWU6IFwiZXhhbXBsZS5jb20uXCIsXG4gICAgICAgIENhbGxlclJlZmVyZW5jZTogXCJUZXN0TGF0ZXMtUHVibGljWm8tT0VTWlBERlY3RzZBXCIsXG4gICAgICAgIENvbmZpZzoge1xuICAgICAgICAgIENvbW1lbnQ6IFwiQ0RLIGNyZWF0ZWRcIixcbiAgICAgICAgICBQcml2YXRlWm9uZTogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgUmVzb3VyY2VSZWNvcmRTZXRDb3VudDogM1xuICAgICAgfTtcblxuICAgICAgc3RhY2subm9kZS5zZXRDb250ZXh0KG1pc3NpbmdbMF0ua2V5LCBmYWtlWm9uZSk7XG5cbiAgICAgIGNvbnN0IGNka1pvbmVQcm9wczogSG9zdGVkWm9uZUF0dHJpYnV0ZXMgPSB7XG4gICAgICAgIGhvc3RlZFpvbmVJZDogZmFrZVpvbmUuSWQsXG4gICAgICAgIHpvbmVOYW1lOiAnZXhhbXBsZS5jb20nLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgY2RrWm9uZSA9IEhvc3RlZFpvbmUuZnJvbUhvc3RlZFpvbmVBdHRyaWJ1dGVzKHN0YWNrLCAnTXlab25lJywgY2RrWm9uZVByb3BzKTtcblxuICAgICAgLy8gV0hFTlxuICAgICAgY29uc3QgcHJvdmlkZXIgPSBuZXcgSG9zdGVkWm9uZVByb3ZpZGVyKHN0YWNrLCBmaWx0ZXIpO1xuICAgICAgY29uc3Qgem9uZVByb3BzID0gc3RhY2sucmVzb2x2ZShwcm92aWRlci5maW5kSG9zdGVkWm9uZSgpKTtcbiAgICAgIGNvbnN0IHpvbmVSZWYgPSBwcm92aWRlci5maW5kQW5kSW1wb3J0KHN0YWNrLCAnTXlab25lUHJvdmlkZXInKTtcblxuICAgICAgLy8gVEhFTlxuICAgICAgdGVzdC5kZWVwRXF1YWwoem9uZVByb3BzLCBjZGtab25lUHJvcHMpO1xuICAgICAgdGVzdC5kZWVwRXF1YWwoem9uZVJlZi5ob3N0ZWRab25lSWQsIGNka1pvbmUuaG9zdGVkWm9uZUlkKTtcbiAgICAgIHRlc3QuZG9uZSgpO1xuICAgIH0sXG4gIH1cbn07XG4iXX0=