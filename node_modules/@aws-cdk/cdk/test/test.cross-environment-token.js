"use strict";
const lib_1 = require("../lib");
const util_1 = require("./util");
class MyResource extends lib_1.Resource {
    constructor(scope, id, physicalName) {
        super(scope, id, {
            physicalName,
        });
        const resourceIdentifiers = new lib_1.ResourceIdentifiers(this, {
            arn: 'simple-arn',
            name: 'simple-name',
            arnComponents: {
                region: '',
                account: '',
                resource: 'my-resource',
                resourceName: this.physicalName.value,
                service: 'myservice',
            },
        });
        this.arn = resourceIdentifiers.arn;
        this.name = resourceIdentifiers.name;
    }
}
module.exports = {
    'CrossEnvironmentToken': {
        'can reference an ARN with a fixed physical name directly in a different account'(test) {
            // GIVEN
            const app = new lib_1.App();
            const stack1 = new lib_1.Stack(app, 'Stack1', {
                env: {
                    account: '123456789012',
                },
            });
            const myResource = new MyResource(stack1, 'MyResource', lib_1.PhysicalName.of('PhysicalName'));
            const stack2 = new lib_1.Stack(app, 'Stack2', {
                env: {
                    account: '234567890123',
                },
            });
            // WHEN
            new lib_1.CfnOutput(stack2, 'Output', {
                value: myResource.arn,
            });
            // THEN
            test.deepEqual(util_1.toCloudFormation(stack2), {
                Outputs: {
                    Output: {
                        Value: {
                            'Fn::Join': [
                                '',
                                [
                                    'arn:',
                                    {
                                        Ref: 'AWS::Partition',
                                    },
                                    ':myservice:::my-resource/PhysicalName',
                                ],
                            ],
                        },
                    },
                },
            });
            test.done();
        },
        'can reference a fixed physical name directly in a different account'(test) {
            // GIVEN
            const app = new lib_1.App();
            const stack1 = new lib_1.Stack(app, 'Stack1', {
                env: {
                    account: '123456789012',
                },
            });
            const stack2 = new lib_1.Stack(app, 'Stack2', {
                env: {
                    account: '234567890123',
                },
            });
            // WHEN
            const myResource = new MyResource(stack1, 'MyResource', lib_1.PhysicalName.of('PhysicalName'));
            new lib_1.CfnOutput(stack2, 'Output', {
                value: myResource.name,
            });
            // THEN
            test.deepEqual(util_1.toCloudFormation(stack2), {
                Outputs: {
                    Output: {
                        Value: 'PhysicalName',
                    },
                },
            });
            test.done();
        },
        'can reference an ARN with an assigned physical name directly in a different account'(test) {
            // GIVEN
            const app = new lib_1.App();
            const stack1 = new lib_1.Stack(app, 'Stack1', {
                env: {
                    account: '123456789012',
                },
            });
            const myResource = new MyResource(stack1, 'MyResource', lib_1.PhysicalName.auto({ crossEnvironment: true }));
            const stack2 = new lib_1.Stack(app, 'Stack2', {
                env: {
                    account: '234567890123',
                },
            });
            // WHEN
            new lib_1.CfnOutput(stack2, 'Output', {
                value: myResource.arn,
            });
            // THEN
            test.deepEqual(util_1.toCloudFormation(stack2), {
                Outputs: {
                    Output: {
                        Value: {
                            'Fn::Join': [
                                '',
                                [
                                    'arn:',
                                    {
                                        Ref: 'AWS::Partition',
                                    },
                                    ':myservice:::my-resource/stack1stack1myresourcec54ced43dab875fcfa49',
                                ],
                            ],
                        },
                    },
                },
            });
            test.done();
        },
        'can reference an assigned physical name directly in a different account'(test) {
            // GIVEN
            const app = new lib_1.App();
            const stack1 = new lib_1.Stack(app, 'Stack1', {
                env: {
                    account: '123456789012',
                },
            });
            const stack2 = new lib_1.Stack(app, 'Stack2', {
                env: {
                    account: '234567890123',
                },
            });
            // WHEN
            const myResource = new MyResource(stack1, 'MyResource', lib_1.PhysicalName.auto({ crossEnvironment: true }));
            new lib_1.CfnOutput(stack2, 'Output', {
                value: myResource.name,
            });
            // THEN
            test.deepEqual(util_1.toCloudFormation(stack2), {
                Outputs: {
                    Output: {
                        Value: 'stack1stack1myresourcec54ced43dab875fcfa49',
                    },
                },
            });
            test.done();
        },
    },
    'cannot reference a deploy-time physical name across environments'(test) {
        // GIVEN
        const app = new lib_1.App();
        const stack1 = new lib_1.Stack(app, 'Stack1', {
            env: {
                account: '123456789012',
            },
        });
        const stack2 = new lib_1.Stack(app, 'Stack2', {
            env: {
                account: '234567890123',
            },
        });
        // WHEN
        const myResource = new MyResource(stack1, 'MyResource', lib_1.PhysicalName.auto());
        new lib_1.CfnOutput(stack2, 'Output', {
            value: myResource.name,
        });
        // THEN
        test.throws(() => util_1.toCloudFormation(stack2), /Cannot use resource 'Stack1\/MyResource' in a cross-environment fashion, as it doesn't have a physical name set/);
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,