import cxapi = require('@aws-cdk/cx-api');
import { Construct } from './construct';
declare type ContextProviderProps = {
    [key: string]: any;
};
/**
 * Methods for CDK-related context information.
 */
export declare class Context {
    /**
     * Returns the default region as passed in through the CDK CLI.
     *
     * @returns The default region as specified in context or `undefined` if the region is not specified.
     */
    static getDefaultRegion(scope: Construct): any;
    /**
     * Returns the default account ID as passed in through the CDK CLI.
     *
     * @returns The default account ID as specified in context or `undefined` if the account ID is not specified.
     */
    static getDefaultAccount(scope: Construct): any;
    /**
     * Returnst the list of AZs in the scope's environment (account/region).
     *
     * If they are not available in the context, returns a set of dummy values and
     * reports them as missing, and let the CLI resolve them by calling EC2
     * `DescribeAvailabilityZones` on the target environment.
     */
    static getAvailabilityZones(scope: Construct): string[];
    /**
     * Retrieves the value of an SSM parameter.
     * @param scope Some construct scope.
     * @param parameterName The name of the parameter
     * @param options Options
     */
    static getSsmParameter(scope: Construct, parameterName: string, options?: SsmParameterOptions): any;
    private constructor();
}
export interface SsmParameterOptions {
    /**
     * The default/dummy value to return if the SSM parameter is not available in the context.
     */
    readonly defaultValue?: string;
}
/**
 * Base class for the model side of context providers
 *
 * Instances of this class communicate with context provider plugins in the 'cdk
 * toolkit' via context variables (input), outputting specialized queries for
 * more context variables (output).
 *
 * ContextProvider needs access to a Construct to hook into the context mechanism.
 */
export declare class ContextProvider {
    private readonly context;
    private readonly provider;
    private readonly props;
    constructor(context: Construct, provider: string, props?: ContextProviderProps);
    readonly key: string;
    /**
     * Read a provider value and verify it is not `null`
     */
    getValue(defaultValue: any): any;
    /**
     * Read a provider value, verifying it's a string
     * @param defaultValue The value to return if there is no value defined for this context key
     */
    getStringValue(defaultValue: string): string;
    /**
     * Read a provider value, verifying it's a list
     * @param defaultValue The value to return if there is no value defined for this context key
     */
    getStringListValue(defaultValue: string[]): string[];
    protected reportMissingContext(report: cxapi.MissingContext): void;
}
export {};
