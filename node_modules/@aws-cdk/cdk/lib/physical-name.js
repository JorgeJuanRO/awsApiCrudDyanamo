"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lazy_1 = require("./lazy");
const physical_name_generator_1 = require("./physical-name-generator");
/**
 * Represents the physical (that is, visible in the AWS Console) name of a resource.
 * These can be known at code runtime,
 * in the case of fixed, customer-provided names,
 * at synthesis time, in case of automatically assigned names by the framework,
 * or only at deploy time, assigned by CloudFormation -
 * which is the default.
 *
 * @see #auto()
 * @see #of()
 */
class PhysicalName {
    /**
     * A physical name that will be automatically generated.
     * The details of how and when that generation will occur can be customized by passing an instance
     * of {@link AutoPhysicalNameOptions}.
     * By default, the physical name of the resource will be generated by CloudFormation,
     * at deploy time.
     */
    static auto(options = {}) {
        return new LateBoundPhysicalName(options);
    }
    /**
     * A fixed physical name (one that is known statically, at synthesis time).
     *
     * @param name the name to assign
     */
    static of(name) {
        return new FixedPhysicalName(name);
    }
    constructor() {
    }
    /**
     * A callback method called if the resource this physical name
     * belongs to has been used in a cross-environment fashion.
     * Allows late-binding of the actual name to only be generated if necessary,
     * and kept deploy-time if not.
     *
     * The default implementation does nothing,
     * but can be overridden in subclasses.
     *
     * @param _resource the resource this physical name belongs to
     * @internal
     */
    _resolveCrossEnvironment(_resource) {
        // does nothing
    }
}
exports.PhysicalName = PhysicalName;
// implementations are private to this module,
// we only surface them through static factory methods
class FixedPhysicalName extends PhysicalName {
    constructor(value) {
        super();
        this.value = value;
    }
}
class LateBoundPhysicalName extends PhysicalName {
    constructor(options) {
        super();
        this.value = options.crossEnvironment
            ? lazy_1.Lazy.stringValue({ produce: () => this.name })
            : undefined;
    }
    /** @internal */
    _resolveCrossEnvironment(resource) {
        if (!this.value) {
            // error out - a deploy-time name cannot be used across environments
            throw new Error(`Cannot use resource '${resource.node.path}' in a cross-environment fashion, ` +
                "as it doesn't have a physical name set. Use PhysicalName.auto({ crossEnvironment: true }) to enable cross env name allocation");
        }
        if (!this.name) {
            this.name = physical_name_generator_1.generatePhysicalName(resource);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGh5c2ljYWwtbmFtZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInBoeXNpY2FsLW5hbWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBOEI7QUFDOUIsdUVBQWlFO0FBc0JqRTs7Ozs7Ozs7OztHQVVHO0FBQ0gsTUFBc0IsWUFBWTtJQUNoQzs7Ozs7O09BTUc7SUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQW1DLEVBQUU7UUFDdEQsT0FBTyxJQUFJLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFZO1FBQzNCLE9BQU8sSUFBSSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQ7SUFDQSxDQUFDO0lBVUQ7Ozs7Ozs7Ozs7O09BV0c7SUFDSSx3QkFBd0IsQ0FBQyxTQUFvQjtRQUNsRCxlQUFlO0lBQ2pCLENBQUM7Q0FDRjtBQS9DRCxvQ0ErQ0M7QUFFRCw4Q0FBOEM7QUFDOUMsc0RBQXNEO0FBRXRELE1BQU0saUJBQWtCLFNBQVEsWUFBWTtJQUMxQyxZQUE0QixLQUFhO1FBQ3ZDLEtBQUssRUFBRSxDQUFDO1FBRGtCLFVBQUssR0FBTCxLQUFLLENBQVE7SUFFekMsQ0FBQztDQUNGO0FBRUQsTUFBTSxxQkFBc0IsU0FBUSxZQUFZO0lBUzlDLFlBQVksT0FBZ0M7UUFDMUMsS0FBSyxFQUFFLENBQUM7UUFFUixJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxnQkFBZ0I7WUFDbkMsQ0FBQyxDQUFDLFdBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ2hELENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDaEIsQ0FBQztJQUVELGdCQUFnQjtJQUNULHdCQUF3QixDQUFDLFFBQW1CO1FBQ2pELElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2Ysb0VBQW9FO1lBQ3BFLE1BQU0sSUFBSSxLQUFLLENBQUMsd0JBQXdCLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxvQ0FBb0M7Z0JBQzVGLCtIQUErSCxDQUFDLENBQUM7U0FDcEk7UUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNkLElBQUksQ0FBQyxJQUFJLEdBQUcsOENBQW9CLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDNUM7SUFDSCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMYXp5IH0gZnJvbSBcIi4vbGF6eVwiO1xuaW1wb3J0IHsgZ2VuZXJhdGVQaHlzaWNhbE5hbWUgfSBmcm9tIFwiLi9waHlzaWNhbC1uYW1lLWdlbmVyYXRvclwiO1xuaW1wb3J0IHsgSVJlc291cmNlIH0gZnJvbSAnLi9yZXNvdXJjZSc7XG5cbi8qKlxuICogT3B0aW9ucyBhbGxvd2luZyBjdXN0b21pemluZyB0aGUgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgcGh5c2ljYWwgbmFtZSBvZiB0aGUgcmVzb3VyY2UuXG4gKiBVc2VkIGluIHRoZSB7QGxpbmsgUGh5c2ljYWxOYW1lI2F1dG99IG1ldGhvZC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBdXRvUGh5c2ljYWxOYW1lT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBBbGxvdyB0aGUgZnJhbWV3b3JrIHRvIGF1dG9tYXRpY2FsbHkgYWxsb2NhdGUgYSBwaHlzaWNhbCBuYW1lIGR1cmluZyBzeW50aGVzaXNcbiAgICogaW4gY2FzZSB0aGlzIHJlc291cmNlIGlzIHJlZmVyZW5jZWQgYWNyb3NzIGVudmlyb25tZW50cy5cbiAgICpcbiAgICogV2hlbiByZXNvdXJjZXMgYXJlIHJlZmVyZW5jZWQgYWNyb3NzIGVudmlyb25tZW50cywgdGhlIHBoeXNpY2FsIG5hbWUgb2YgdGhlXG4gICAqIHJlc291cmNlIG11c3QgYmUga25vd24gZHVyaW5nIHN5bnRoZXNpcyBpbiBvcmRlciB0byBhdm9pZCB0aGUgbmVlZCB0byBjb21tdW5pY2F0ZVxuICAgKiBhY3Jvc3MgZW52aXJvbm1lbnRzIGR1cmluZyBkZXBsb3ltZW50LiBUaGlzIGFsc28gcmVtb3ZlcyB0aGUgcG90ZW50aWFsIG9mIGN5Y2xpY1xuICAgKiByZWZlcmVuY2VzLlxuICAgKlxuICAgKiBAZGVmYXVsdCBmYWxzZSBBIHBoeXNpY2FsIG5hbWUgd2lsbCBiZSBhbGxvY2F0ZWQgZHVyaW5nIGRlcGxveW1lbnQgYnkgQVdTIENsb3VkRm9ybWF0aW9uLlxuICAgKi9cbiAgcmVhZG9ubHkgY3Jvc3NFbnZpcm9ubWVudD86IGJvb2xlYW47XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyB0aGUgcGh5c2ljYWwgKHRoYXQgaXMsIHZpc2libGUgaW4gdGhlIEFXUyBDb25zb2xlKSBuYW1lIG9mIGEgcmVzb3VyY2UuXG4gKiBUaGVzZSBjYW4gYmUga25vd24gYXQgY29kZSBydW50aW1lLFxuICogaW4gdGhlIGNhc2Ugb2YgZml4ZWQsIGN1c3RvbWVyLXByb3ZpZGVkIG5hbWVzLFxuICogYXQgc3ludGhlc2lzIHRpbWUsIGluIGNhc2Ugb2YgYXV0b21hdGljYWxseSBhc3NpZ25lZCBuYW1lcyBieSB0aGUgZnJhbWV3b3JrLFxuICogb3Igb25seSBhdCBkZXBsb3kgdGltZSwgYXNzaWduZWQgYnkgQ2xvdWRGb3JtYXRpb24gLVxuICogd2hpY2ggaXMgdGhlIGRlZmF1bHQuXG4gKlxuICogQHNlZSAjYXV0bygpXG4gKiBAc2VlICNvZigpXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBQaHlzaWNhbE5hbWUge1xuICAvKipcbiAgICogQSBwaHlzaWNhbCBuYW1lIHRoYXQgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZC5cbiAgICogVGhlIGRldGFpbHMgb2YgaG93IGFuZCB3aGVuIHRoYXQgZ2VuZXJhdGlvbiB3aWxsIG9jY3VyIGNhbiBiZSBjdXN0b21pemVkIGJ5IHBhc3NpbmcgYW4gaW5zdGFuY2VcbiAgICogb2Yge0BsaW5rIEF1dG9QaHlzaWNhbE5hbWVPcHRpb25zfS5cbiAgICogQnkgZGVmYXVsdCwgdGhlIHBoeXNpY2FsIG5hbWUgb2YgdGhlIHJlc291cmNlIHdpbGwgYmUgZ2VuZXJhdGVkIGJ5IENsb3VkRm9ybWF0aW9uLFxuICAgKiBhdCBkZXBsb3kgdGltZS5cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgYXV0byhvcHRpb25zOiBBdXRvUGh5c2ljYWxOYW1lT3B0aW9ucyA9IHt9KTogUGh5c2ljYWxOYW1lIHtcbiAgICByZXR1cm4gbmV3IExhdGVCb3VuZFBoeXNpY2FsTmFtZShvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIGZpeGVkIHBoeXNpY2FsIG5hbWUgKG9uZSB0aGF0IGlzIGtub3duIHN0YXRpY2FsbHksIGF0IHN5bnRoZXNpcyB0aW1lKS5cbiAgICpcbiAgICogQHBhcmFtIG5hbWUgdGhlIG5hbWUgdG8gYXNzaWduXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIG9mKG5hbWU6IHN0cmluZyk6IFBoeXNpY2FsTmFtZSB7XG4gICAgcmV0dXJuIG5ldyBGaXhlZFBoeXNpY2FsTmFtZShuYW1lKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBjb25zdHJ1Y3RvcigpIHtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBwaHlzaWNhbCBuYW1lLCBhcyBhIFN0cmluZy5cbiAgICogSWYgdGhlIGN1c3RvbWVyIGFzc2lnbmVkIGEgcGh5c2ljYWwgbmFtZSB0byB0aGUgcmVzb3VyY2UsIGl0IHdpbGwgYmUgcmV0dXJuZWQsIHVuY2hhbmdlZDtcbiAgICogY2FuIGJlIGB1bmRlZmluZWRgLCBpZiBhIHBoeXNpY2FsIG5hbWUgd2FzIG5vdCBwcm92aWRlZCxcbiAgICogb3IgYW4gb3BhcXVlIFRva2VuLCBpZiBhIGdlbmVyYXRlZCBuYW1lIHNob3VsZCBiZSBhc3NpZ25lZCBsYXppbHkgYXQgc3ludGhlc2lzIHRpbWUuXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0IHZhbHVlKCk6IHN0cmluZyB8IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogQSBjYWxsYmFjayBtZXRob2QgY2FsbGVkIGlmIHRoZSByZXNvdXJjZSB0aGlzIHBoeXNpY2FsIG5hbWVcbiAgICogYmVsb25ncyB0byBoYXMgYmVlbiB1c2VkIGluIGEgY3Jvc3MtZW52aXJvbm1lbnQgZmFzaGlvbi5cbiAgICogQWxsb3dzIGxhdGUtYmluZGluZyBvZiB0aGUgYWN0dWFsIG5hbWUgdG8gb25seSBiZSBnZW5lcmF0ZWQgaWYgbmVjZXNzYXJ5LFxuICAgKiBhbmQga2VwdCBkZXBsb3ktdGltZSBpZiBub3QuXG4gICAqXG4gICAqIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGRvZXMgbm90aGluZyxcbiAgICogYnV0IGNhbiBiZSBvdmVycmlkZGVuIGluIHN1YmNsYXNzZXMuXG4gICAqXG4gICAqIEBwYXJhbSBfcmVzb3VyY2UgdGhlIHJlc291cmNlIHRoaXMgcGh5c2ljYWwgbmFtZSBiZWxvbmdzIHRvXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcHVibGljIF9yZXNvbHZlQ3Jvc3NFbnZpcm9ubWVudChfcmVzb3VyY2U6IElSZXNvdXJjZSk6IHZvaWQge1xuICAgIC8vIGRvZXMgbm90aGluZ1xuICB9XG59XG5cbi8vIGltcGxlbWVudGF0aW9ucyBhcmUgcHJpdmF0ZSB0byB0aGlzIG1vZHVsZSxcbi8vIHdlIG9ubHkgc3VyZmFjZSB0aGVtIHRocm91Z2ggc3RhdGljIGZhY3RvcnkgbWV0aG9kc1xuXG5jbGFzcyBGaXhlZFBoeXNpY2FsTmFtZSBleHRlbmRzIFBoeXNpY2FsTmFtZSB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSB2YWx1ZTogc3RyaW5nKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxufVxuXG5jbGFzcyBMYXRlQm91bmRQaHlzaWNhbE5hbWUgZXh0ZW5kcyBQaHlzaWNhbE5hbWUge1xuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBwaHlzaWNhbCBuYW1lIC1cbiAgICogZWl0aGVyIGEgVG9rZW4gc3RyaW5nIGlmIGNyb3NzRW52aXJvbm1lbnQgaXMgdHJ1ZSxcbiAgICogb3IgdW5kZWZpbmVkIG90aGVyd2lzZS5cbiAgICovXG4gIHB1YmxpYyByZWFkb25seSB2YWx1ZTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICBwcml2YXRlIG5hbWU/OiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3Iob3B0aW9uczogQXV0b1BoeXNpY2FsTmFtZU9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy52YWx1ZSA9IG9wdGlvbnMuY3Jvc3NFbnZpcm9ubWVudFxuICAgICAgPyBMYXp5LnN0cmluZ1ZhbHVlKHsgcHJvZHVjZTogKCkgPT4gdGhpcy5uYW1lIH0pXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHVibGljIF9yZXNvbHZlQ3Jvc3NFbnZpcm9ubWVudChyZXNvdXJjZTogSVJlc291cmNlKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLnZhbHVlKSB7XG4gICAgICAvLyBlcnJvciBvdXQgLSBhIGRlcGxveS10aW1lIG5hbWUgY2Fubm90IGJlIHVzZWQgYWNyb3NzIGVudmlyb25tZW50c1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgdXNlIHJlc291cmNlICcke3Jlc291cmNlLm5vZGUucGF0aH0nIGluIGEgY3Jvc3MtZW52aXJvbm1lbnQgZmFzaGlvbiwgYCArXG4gICAgICAgIFwiYXMgaXQgZG9lc24ndCBoYXZlIGEgcGh5c2ljYWwgbmFtZSBzZXQuIFVzZSBQaHlzaWNhbE5hbWUuYXV0byh7IGNyb3NzRW52aXJvbm1lbnQ6IHRydWUgfSkgdG8gZW5hYmxlIGNyb3NzIGVudiBuYW1lIGFsbG9jYXRpb25cIik7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLm5hbWUpIHtcbiAgICAgIHRoaXMubmFtZSA9IGdlbmVyYXRlUGh5c2ljYWxOYW1lKHJlc291cmNlKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==