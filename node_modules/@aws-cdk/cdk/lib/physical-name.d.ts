/**
 * Options allowing customizing the automatically generated physical name of the resource.
 * Used in the {@link PhysicalName#auto} method.
 */
export interface AutoPhysicalNameOptions {
    /**
     * Allow the framework to automatically allocate a physical name during synthesis
     * in case this resource is referenced across environments.
     *
     * When resources are referenced across environments, the physical name of the
     * resource must be known during synthesis in order to avoid the need to communicate
     * across environments during deployment. This also removes the potential of cyclic
     * references.
     *
     * @default false A physical name will be allocated during deployment by AWS CloudFormation.
     */
    readonly crossEnvironment?: boolean;
}
/**
 * Represents the physical (that is, visible in the AWS Console) name of a resource.
 * These can be known at code runtime,
 * in the case of fixed, customer-provided names,
 * at synthesis time, in case of automatically assigned names by the framework,
 * or only at deploy time, assigned by CloudFormation -
 * which is the default.
 *
 * @see #auto()
 * @see #of()
 */
export declare abstract class PhysicalName {
    /**
     * A physical name that will be automatically generated.
     * The details of how and when that generation will occur can be customized by passing an instance
     * of {@link AutoPhysicalNameOptions}.
     * By default, the physical name of the resource will be generated by CloudFormation,
     * at deploy time.
     */
    static auto(options?: AutoPhysicalNameOptions): PhysicalName;
    /**
     * A fixed physical name (one that is known statically, at synthesis time).
     *
     * @param name the name to assign
     */
    static of(name: string): PhysicalName;
    protected constructor();
    /**
     * Returns the physical name, as a String.
     * If the customer assigned a physical name to the resource, it will be returned, unchanged;
     * can be `undefined`, if a physical name was not provided,
     * or an opaque Token, if a generated name should be assigned lazily at synthesis time.
     */
    abstract readonly value: string | undefined;
}
