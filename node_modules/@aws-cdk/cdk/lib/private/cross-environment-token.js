"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const stack_1 = require("../stack");
const stack_trace_1 = require("../stack-trace");
/**
 * A Token that represents a reference that spans accounts and/or regions,
 * and so requires the resources to have physical names.
 * You should never need to interact with these directly,
 * instead use the {@link ResourceIdentifiers} class.
 * This class is private to the @aws-cdk/cdk package.
 */
class CrossEnvironmentToken {
    /**
     * @param regularValue the value used when this is referenced NOT from a cross account and/or region Stack
     * @param crossEnvironmentValue the value used when this is referenced from a cross account and/or region Stack
     * @param resource the scope this reference is mastered in. Used to determine the owning Stack
     * @param displayName a short name to be used in Token display
     */
    constructor(regularValue, crossEnvironmentValue, resource) {
        this.regularValue = regularValue;
        this.crossEnvironmentValue = crossEnvironmentValue;
        this.resource = resource;
        this.resource = resource;
        this.creationStack = stack_trace_1.captureStackTrace();
    }
    resolve(context) {
        const consumingStack = stack_1.Stack.of(context.scope);
        const owningStack = stack_1.Stack.of(this.resource);
        if (consumingStack.environment !== owningStack.environment) {
            this.resource.physicalName._resolveCrossEnvironment(this.resource);
            return this.crossEnvironmentValue;
        }
        else {
            return this.regularValue;
        }
    }
}
exports.CrossEnvironmentToken = CrossEnvironmentToken;
class CrossEnvironmentPhysicalArnToken extends CrossEnvironmentToken {
    constructor(regularValue, arnComponents, resource) {
        super(regularValue, stack_1.Stack.of(resource).formatArn(arnComponents), resource);
    }
}
exports.CrossEnvironmentPhysicalArnToken = CrossEnvironmentPhysicalArnToken;
class CrossEnvironmentPhysicalNameToken extends CrossEnvironmentToken {
    constructor(regularValue, resource) {
        super(regularValue, resource.physicalName.value, resource);
    }
}
exports.CrossEnvironmentPhysicalNameToken = CrossEnvironmentPhysicalNameToken;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3Jvc3MtZW52aXJvbm1lbnQtdG9rZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjcm9zcy1lbnZpcm9ubWVudC10b2tlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUdBLG9DQUFpQztBQUNqQyxnREFBbUQ7QUFFbkQ7Ozs7OztHQU1HO0FBQ0gsTUFBc0IscUJBQXFCO0lBR3pDOzs7OztPQUtHO0lBQ0gsWUFBdUMsWUFBb0IsRUFBbUIscUJBQTBCLEVBQ2pFLFFBQW1CO1FBRG5CLGlCQUFZLEdBQVosWUFBWSxDQUFRO1FBQW1CLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBSztRQUNqRSxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQ3hELElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxhQUFhLEdBQUcsK0JBQWlCLEVBQUUsQ0FBQztJQUMzQyxDQUFDO0lBRU0sT0FBTyxDQUFDLE9BQXdCO1FBQ3JDLE1BQU0sY0FBYyxHQUFHLGFBQUssQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQy9DLE1BQU0sV0FBVyxHQUFHLGFBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRTVDLElBQUksY0FBYyxDQUFDLFdBQVcsS0FBSyxXQUFXLENBQUMsV0FBVyxFQUFFO1lBQzFELElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNuRSxPQUFPLElBQUksQ0FBQyxxQkFBcUIsQ0FBQztTQUNuQzthQUFNO1lBQ0wsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO1NBQzFCO0lBQ0gsQ0FBQztDQUNGO0FBMUJELHNEQTBCQztBQUVELE1BQWEsZ0NBQWlDLFNBQVEscUJBQXFCO0lBQ3pFLFlBQVksWUFBb0IsRUFBRSxhQUE0QixFQUFFLFFBQW1CO1FBQ2pGLEtBQUssQ0FBQyxZQUFZLEVBQUUsYUFBSyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDN0UsQ0FBQztDQUNGO0FBSkQsNEVBSUM7QUFFRCxNQUFhLGlDQUFrQyxTQUFRLHFCQUFxQjtJQUMxRSxZQUFZLFlBQW9CLEVBQUUsUUFBbUI7UUFDbkQsS0FBSyxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztJQUM3RCxDQUFDO0NBQ0Y7QUFKRCw4RUFJQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFybkNvbXBvbmVudHMgfSBmcm9tICcuLi9hcm4nO1xuaW1wb3J0IHsgSVJlc29sdmFibGUsIElSZXNvbHZlQ29udGV4dCB9IGZyb20gJy4uL3Jlc29sdmFibGUnO1xuaW1wb3J0IHsgSVJlc291cmNlIH0gZnJvbSAnLi4vcmVzb3VyY2UnO1xuaW1wb3J0IHsgU3RhY2sgfSBmcm9tICcuLi9zdGFjayc7XG5pbXBvcnQgeyBjYXB0dXJlU3RhY2tUcmFjZSB9IGZyb20gJy4uL3N0YWNrLXRyYWNlJztcblxuLyoqXG4gKiBBIFRva2VuIHRoYXQgcmVwcmVzZW50cyBhIHJlZmVyZW5jZSB0aGF0IHNwYW5zIGFjY291bnRzIGFuZC9vciByZWdpb25zLFxuICogYW5kIHNvIHJlcXVpcmVzIHRoZSByZXNvdXJjZXMgdG8gaGF2ZSBwaHlzaWNhbCBuYW1lcy5cbiAqIFlvdSBzaG91bGQgbmV2ZXIgbmVlZCB0byBpbnRlcmFjdCB3aXRoIHRoZXNlIGRpcmVjdGx5LFxuICogaW5zdGVhZCB1c2UgdGhlIHtAbGluayBSZXNvdXJjZUlkZW50aWZpZXJzfSBjbGFzcy5cbiAqIFRoaXMgY2xhc3MgaXMgcHJpdmF0ZSB0byB0aGUgQGF3cy1jZGsvY2RrIHBhY2thZ2UuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDcm9zc0Vudmlyb25tZW50VG9rZW4gaW1wbGVtZW50cyBJUmVzb2x2YWJsZSB7XG4gIHB1YmxpYyByZWFkb25seSBjcmVhdGlvblN0YWNrOiBzdHJpbmdbXTtcblxuICAvKipcbiAgICogQHBhcmFtIHJlZ3VsYXJWYWx1ZSB0aGUgdmFsdWUgdXNlZCB3aGVuIHRoaXMgaXMgcmVmZXJlbmNlZCBOT1QgZnJvbSBhIGNyb3NzIGFjY291bnQgYW5kL29yIHJlZ2lvbiBTdGFja1xuICAgKiBAcGFyYW0gY3Jvc3NFbnZpcm9ubWVudFZhbHVlIHRoZSB2YWx1ZSB1c2VkIHdoZW4gdGhpcyBpcyByZWZlcmVuY2VkIGZyb20gYSBjcm9zcyBhY2NvdW50IGFuZC9vciByZWdpb24gU3RhY2tcbiAgICogQHBhcmFtIHJlc291cmNlIHRoZSBzY29wZSB0aGlzIHJlZmVyZW5jZSBpcyBtYXN0ZXJlZCBpbi4gVXNlZCB0byBkZXRlcm1pbmUgdGhlIG93bmluZyBTdGFja1xuICAgKiBAcGFyYW0gZGlzcGxheU5hbWUgYSBzaG9ydCBuYW1lIHRvIGJlIHVzZWQgaW4gVG9rZW4gZGlzcGxheVxuICAgKi9cbiAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgcmVndWxhclZhbHVlOiBzdHJpbmcsIHByaXZhdGUgcmVhZG9ubHkgY3Jvc3NFbnZpcm9ubWVudFZhbHVlOiBhbnksXG4gICAgICAgICAgICAgICAgICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHJlc291cmNlOiBJUmVzb3VyY2UpIHtcbiAgICB0aGlzLnJlc291cmNlID0gcmVzb3VyY2U7XG4gICAgdGhpcy5jcmVhdGlvblN0YWNrID0gY2FwdHVyZVN0YWNrVHJhY2UoKTtcbiAgfVxuXG4gIHB1YmxpYyByZXNvbHZlKGNvbnRleHQ6IElSZXNvbHZlQ29udGV4dCk6IGFueSB7XG4gICAgY29uc3QgY29uc3VtaW5nU3RhY2sgPSBTdGFjay5vZihjb250ZXh0LnNjb3BlKTtcbiAgICBjb25zdCBvd25pbmdTdGFjayA9IFN0YWNrLm9mKHRoaXMucmVzb3VyY2UpO1xuXG4gICAgaWYgKGNvbnN1bWluZ1N0YWNrLmVudmlyb25tZW50ICE9PSBvd25pbmdTdGFjay5lbnZpcm9ubWVudCkge1xuICAgICAgdGhpcy5yZXNvdXJjZS5waHlzaWNhbE5hbWUuX3Jlc29sdmVDcm9zc0Vudmlyb25tZW50KHRoaXMucmVzb3VyY2UpO1xuICAgICAgcmV0dXJuIHRoaXMuY3Jvc3NFbnZpcm9ubWVudFZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5yZWd1bGFyVmFsdWU7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDcm9zc0Vudmlyb25tZW50UGh5c2ljYWxBcm5Ub2tlbiBleHRlbmRzIENyb3NzRW52aXJvbm1lbnRUb2tlbiB7XG4gIGNvbnN0cnVjdG9yKHJlZ3VsYXJWYWx1ZTogc3RyaW5nLCBhcm5Db21wb25lbnRzOiBBcm5Db21wb25lbnRzLCByZXNvdXJjZTogSVJlc291cmNlKSB7XG4gICAgc3VwZXIocmVndWxhclZhbHVlLCBTdGFjay5vZihyZXNvdXJjZSkuZm9ybWF0QXJuKGFybkNvbXBvbmVudHMpLCByZXNvdXJjZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENyb3NzRW52aXJvbm1lbnRQaHlzaWNhbE5hbWVUb2tlbiBleHRlbmRzIENyb3NzRW52aXJvbm1lbnRUb2tlbiB7XG4gIGNvbnN0cnVjdG9yKHJlZ3VsYXJWYWx1ZTogc3RyaW5nLCByZXNvdXJjZTogSVJlc291cmNlKSB7XG4gICAgc3VwZXIocmVndWxhclZhbHVlLCByZXNvdXJjZS5waHlzaWNhbE5hbWUudmFsdWUsIHJlc291cmNlKTtcbiAgfVxufVxuIl19