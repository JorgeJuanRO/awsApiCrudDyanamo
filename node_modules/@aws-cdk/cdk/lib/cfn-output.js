"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cfn_element_1 = require("./cfn-element");
const construct_1 = require("./construct");
class CfnOutput extends cfn_element_1.CfnElement {
    /**
     * Creates an CfnOutput value for this stack.
     * @param scope The parent construct.
     * @param props CfnOutput properties.
     */
    constructor(scope, id, props) {
        super(scope, id);
        if (props.value === undefined) {
            throw new Error(`Missing value for CloudFormation output at path "${this.node.path}"`);
        }
        this.description = props.description;
        this._value = props.value;
        this.condition = props.condition;
        this.disableExport = props.disableExport !== undefined ? props.disableExport : false;
        if (props.export && this.disableExport) {
            throw new Error('Cannot set `disableExport` and specify an export name');
        }
        this.export = props.export;
        if (props.export) {
            this.export = props.export;
        }
    }
    /**
     * The value of the property returned by the aws cloudformation describe-stacks command.
     * The value of an output can include literals, parameter references, pseudo-parameters,
     * a mapping value, or intrinsic functions.
     */
    get value() {
        return this._value;
    }
    /**
     * Returns an FnImportValue bound to this export name.
     */
    makeImportValue() {
        return fn().importValue(this.obtainExportName());
    }
    /**
     * @internal
     */
    _toCloudFormation() {
        return {
            Outputs: {
                [this.logicalId]: {
                    Description: this.description,
                    Value: this.value,
                    Export: this.export != null ? { Name: this.export } : undefined,
                    Condition: this.condition ? this.condition.logicalId : undefined
                }
            }
        };
    }
    /**
     * Allocate an export name for this `CfnOutput` if not already done.
     */
    obtainExportName() {
        if (!this.export && this.disableExport) {
            throw new Error('Cannot create an ImportValue; `disableExport` has been set.');
        }
        if (!this.export) {
            this.export = this.uniqueOutputName();
        }
        return this.export;
    }
    /**
     * Automatically determine an output name for use with FnImportValue
     *
     * This gets called in case the user hasn't specified an export name but is
     * taking an action that requires exporting. We namespace with the stack name
     * to reduce chances of collissions between CDK apps.
     */
    uniqueOutputName() {
        // prefix export name with stack name since exports are global within account + region.
        const stackName = this.stack.stackName;
        return (stackName ? stackName + ':' : '') + this.logicalId;
    }
}
exports.CfnOutput = CfnOutput;
/**
 * An output for a list of strings.
 *
 * Exports a list of Tokens via an CfnOutput variable, and return a list of Tokens
 * that selects the imported values for them.
 */
class StringListCfnOutput extends construct_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.separator = props.separator || ',';
        this.length = props.values.length;
        this.output = new CfnOutput(this, 'Resource', {
            description: props.description,
            condition: props.condition,
            disableExport: props.disableExport,
            export: props.export,
            value: fn().join(this.separator, props.values)
        });
    }
    /**
     * Return an array of imported values for this CfnOutput
     */
    makeImportValues() {
        const combined = this.output.makeImportValue();
        const ret = [];
        for (let i = 0; i < this.length; i++) {
            ret.push(fn().select(i, fn().split(this.separator, combined)));
        }
        return ret;
    }
}
exports.StringListCfnOutput = StringListCfnOutput;
function fn() {
    // Lazy loading of "Fn" module to break dependency cycles on startup
    return require('./fn').Fn;
}
//# sourceMappingURL=data:application/json;base64,