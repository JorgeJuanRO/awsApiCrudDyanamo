"use strict";
const assert_1 = require("@aws-cdk/assert");
const cdk_1 = require("@aws-cdk/cdk");
const lib_1 = require("../lib");
module.exports = {
    'security group can allows all outbound traffic by default'(test) {
        // GIVEN
        const stack = new cdk_1.Stack();
        const vpc = new lib_1.Vpc(stack, 'VPC');
        // WHEN
        new lib_1.SecurityGroup(stack, 'SG1', { vpc, allowAllOutbound: true });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::EC2::SecurityGroup', {
            SecurityGroupEgress: [
                {
                    CidrIp: "0.0.0.0/0",
                    Description: "Allow all outbound traffic by default",
                    IpProtocol: "-1"
                }
            ],
        }));
        test.done();
    },
    'no new outbound rule is added if we are allowing all traffic anyway'(test) {
        // GIVEN
        const stack = new cdk_1.Stack();
        const vpc = new lib_1.Vpc(stack, 'VPC');
        // WHEN
        const sg = new lib_1.SecurityGroup(stack, 'SG1', { vpc, allowAllOutbound: true });
        sg.addEgressRule(new lib_1.AnyIPv4(), new lib_1.TcpPort(86), 'This does not show up');
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::EC2::SecurityGroup', {
            SecurityGroupEgress: [
                {
                    CidrIp: "0.0.0.0/0",
                    Description: "Allow all outbound traffic by default",
                    IpProtocol: "-1"
                },
            ],
        }));
        test.done();
    },
    'security group disallow outbound traffic by default'(test) {
        // GIVEN
        const stack = new cdk_1.Stack();
        const vpc = new lib_1.Vpc(stack, 'VPC');
        // WHEN
        new lib_1.SecurityGroup(stack, 'SG1', { vpc, allowAllOutbound: false });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::EC2::SecurityGroup', {
            SecurityGroupEgress: [
                {
                    CidrIp: "255.255.255.255/32",
                    Description: "Disallow all traffic",
                    FromPort: 252,
                    IpProtocol: "icmp",
                    ToPort: 86
                }
            ],
        }));
        test.done();
    },
    'bogus outbound rule disappears if another rule is added'(test) {
        // GIVEN
        const stack = new cdk_1.Stack();
        const vpc = new lib_1.Vpc(stack, 'VPC');
        // WHEN
        const sg = new lib_1.SecurityGroup(stack, 'SG1', { vpc, allowAllOutbound: false });
        sg.addEgressRule(new lib_1.AnyIPv4(), new lib_1.TcpPort(86), 'This replaces the other one');
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::EC2::SecurityGroup', {
            SecurityGroupEgress: [
                {
                    CidrIp: "0.0.0.0/0",
                    Description: "This replaces the other one",
                    FromPort: 86,
                    IpProtocol: "tcp",
                    ToPort: 86
                }
            ],
        }));
        test.done();
    },
    'all outbound rule cannot be added after creation'(test) {
        // GIVEN
        const stack = new cdk_1.Stack();
        const vpc = new lib_1.Vpc(stack, 'VPC');
        // WHEN
        const sg = new lib_1.SecurityGroup(stack, 'SG1', { vpc, allowAllOutbound: false });
        test.throws(() => {
            sg.addEgressRule(new lib_1.AnyIPv4(), new lib_1.AllTraffic(), 'All traffic');
        }, /Cannot add/);
        test.done();
    },
    'peer between all types of peers and port range types'(test) {
        // GIVEN
        const stack = new cdk_1.Stack(undefined, 'TestStack', { env: { account: '12345678', region: 'dummy' } });
        const vpc = new lib_1.Vpc(stack, 'VPC');
        const sg = new lib_1.SecurityGroup(stack, 'SG', { vpc });
        const peers = [
            new lib_1.SecurityGroup(stack, 'PeerGroup', { vpc }),
            new lib_1.AnyIPv4(),
            new lib_1.AnyIPv6(),
            new lib_1.PrefixList('pl-012345'),
        ];
        const ports = [
            new lib_1.TcpPort(1234),
            new lib_1.TcpPort(cdk_1.Lazy.numberValue({ produce: () => 5000 })),
            new lib_1.TcpAllPorts(),
            new lib_1.TcpPortRange(80, 90),
            new lib_1.UdpPort(2345),
            new lib_1.UdpPort(cdk_1.Lazy.numberValue({ produce: () => 7777 })),
            new lib_1.UdpAllPorts(),
            new lib_1.UdpPortRange(85, 95),
            new lib_1.IcmpTypeAndCode(5, 1),
            new lib_1.IcmpAllTypeCodes(8),
            new lib_1.IcmpAllTypesAndCodes(),
            new lib_1.IcmpPing(),
            new lib_1.AllTraffic()
        ];
        // WHEN
        for (const peer of peers) {
            for (const port of ports) {
                sg.connections.allowTo(peer, port);
                sg.connections.allowFrom(peer, port);
            }
        }
        // THEN -- no crash
        test.done();
    },
    'if tokens are used in ports, `canInlineRule` should be false to avoid cycles'(test) {
        // GIVEN
        const p1 = cdk_1.Lazy.numberValue({ produce: () => 80 });
        const p2 = cdk_1.Lazy.numberValue({ produce: () => 5000 });
        // WHEN
        const ports = [
            new lib_1.TcpPort(p1),
            new lib_1.TcpPort(p2),
            new lib_1.TcpPortRange(p1, 90),
            new lib_1.TcpPortRange(80, p2),
            new lib_1.TcpPortRange(p1, p2),
            new lib_1.UdpPort(p1),
            new lib_1.UdpPortRange(p1, 95),
            new lib_1.UdpPortRange(85, p2),
            new lib_1.UdpPortRange(p1, p2),
            new lib_1.IcmpTypeAndCode(p1, 1),
            new lib_1.IcmpTypeAndCode(5, p1),
            new lib_1.IcmpTypeAndCode(p1, p2),
            new lib_1.IcmpAllTypeCodes(p1),
        ];
        // THEN
        for (const range of ports) {
            test.equal(range.canInlineRule, false, range.toString());
        }
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,