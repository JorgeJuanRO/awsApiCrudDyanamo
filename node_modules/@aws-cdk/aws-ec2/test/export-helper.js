"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk_1 = require("@aws-cdk/cdk");
const lib_1 = require("../lib");
const util_1 = require("../lib/util");
function exportVpc(vpc) {
    const pub = new ExportSubnetGroup(vpc, 'PublicSubnetIDs', vpc.publicSubnets, lib_1.SubnetType.Public, vpc.availabilityZones.length);
    const priv = new ExportSubnetGroup(vpc, 'PrivateSubnetIDs', vpc.privateSubnets, lib_1.SubnetType.Private, vpc.availabilityZones.length);
    const iso = new ExportSubnetGroup(vpc, 'IsolatedSubnetIDs', vpc.isolatedSubnets, lib_1.SubnetType.Isolated, vpc.availabilityZones.length);
    const vpnGatewayId = vpc.vpnGatewayId
        ? new cdk_1.CfnOutput(vpc, 'VpnGatewayId', { value: vpc.vpnGatewayId }).makeImportValue().toString()
        : undefined;
    return {
        vpcId: new cdk_1.CfnOutput(vpc, 'VpcId', { value: vpc.vpcId }).makeImportValue().toString(),
        vpnGatewayId,
        availabilityZones: vpc.availabilityZones,
        publicSubnetIds: pub.ids,
        publicSubnetNames: pub.names,
        privateSubnetIds: priv.ids,
        privateSubnetNames: priv.names,
        isolatedSubnetIds: iso.ids,
        isolatedSubnetNames: iso.names,
    };
}
exports.exportVpc = exportVpc;
/**
 * Helper class to export/import groups of subnets
 */
class ExportSubnetGroup {
    constructor(scope, exportName, subnets, type, azs) {
        this.subnets = subnets;
        this.type = type;
        this.azs = azs;
        this.groups = subnets.length / azs;
        // ASSERTION
        if (Math.floor(this.groups) !== this.groups) {
            throw new Error(`Number of subnets (${subnets.length}) must be a multiple of number of availability zones (${azs})`);
        }
        this.ids = this.exportIds(scope, exportName);
        this.names = this.exportNames();
    }
    exportIds(scope, name) {
        if (this.subnets.length === 0) {
            return undefined;
        }
        return new cdk_1.StringListCfnOutput(scope, name, { values: this.subnets.map(s => s.subnetId) }).makeImportValues().map(x => x.toString());
    }
    /**
     * Return the list of subnet names if they're not equal to the default
     */
    exportNames() {
        if (this.subnets.length === 0) {
            return undefined;
        }
        const netNames = this.subnets.map(util_1.subnetName);
        // Do some assertion that the 'netNames' array is laid out like this:
        //
        // [ INGRESS, INGRESS, INGRESS, EGRESS, EGRESS, EGRESS, ... ]
        for (let i = 0; i < netNames.length; i++) {
            const k = Math.floor(i / this.azs);
            if (netNames[i] !== netNames[k * this.azs]) {
                throw new Error(`Subnets must be grouped by name, got: ${JSON.stringify(netNames)}`);
            }
        }
        // Splat down to [ INGRESS, EGRESS, ... ]
        const groupNames = util_1.range(this.groups).map(i => netNames[i * this.azs]);
        if (groupNames.length === 1 && groupNames[0] === util_1.defaultSubnetName(this.type)) {
            return undefined;
        }
        return groupNames;
    }
}
exports.ExportSubnetGroup = ExportSubnetGroup;
//# sourceMappingURL=data:application/json;base64,