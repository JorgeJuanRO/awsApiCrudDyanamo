"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/cdk");
const cxapi = require("@aws-cdk/cx-api");
/**
 * Context provider to discover and import existing VPCs
 */
class VpcNetworkProvider {
    constructor(context, options) {
        const filter = options.tags || {};
        // We give special treatment to some tags
        if (options.vpcId) {
            filter['vpc-id'] = options.vpcId;
        }
        if (options.vpcName) {
            filter['tag:Name'] = options.vpcName;
        }
        if (options.isDefault !== undefined) {
            filter.isDefault = options.isDefault ? 'true' : 'false';
        }
        this.provider = new cdk.ContextProvider(context, cxapi.VPC_PROVIDER, { filter });
    }
    /**
     * Return the VPC import props matching the filter
     */
    get vpcProps() {
        const ret = this.provider.getValue(DUMMY_VPC_PROPS);
        return ret;
    }
}
exports.VpcNetworkProvider = VpcNetworkProvider;
/**
 * There are returned when the provider has not supplied props yet
 *
 * It's only used for testing and on the first run-through.
 */
const DUMMY_VPC_PROPS = {
    availabilityZones: ['dummy-1a', 'dummy-1b'],
    vpcId: 'vpc-12345',
    publicSubnetIds: ['s-12345', 's-67890'],
    privateSubnetIds: ['p-12345', 'p-67890'],
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidnBjLW5ldHdvcmstcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ2cGMtbmV0d29yay1wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG9DQUFxQztBQUNyQyx5Q0FBMEM7QUE2QzFDOztHQUVHO0FBQ0gsTUFBYSxrQkFBa0I7SUFHN0IsWUFBWSxPQUFzQixFQUFFLE9BQXlCO1FBQzNELE1BQU0sTUFBTSxHQUE0QixPQUFPLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUUzRCx5Q0FBeUM7UUFDekMsSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFO1lBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUM7U0FBRTtRQUN4RCxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUU7WUFBRSxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQztTQUFFO1FBQzlELElBQUksT0FBTyxDQUFDLFNBQVMsS0FBSyxTQUFTLEVBQUU7WUFDbkMsTUFBTSxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztTQUN6RDtRQUVELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxHQUFHLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsWUFBWSxFQUFFLEVBQUUsTUFBTSxFQUEyQixDQUFDLENBQUM7SUFDNUcsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBVyxRQUFRO1FBQ2pCLE1BQU0sR0FBRyxHQUE2QixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUM5RSxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7Q0FDRjtBQXZCRCxnREF1QkM7QUFFRDs7OztHQUlHO0FBQ0gsTUFBTSxlQUFlLEdBQTZCO0lBQ2hELGlCQUFpQixFQUFFLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQztJQUMzQyxLQUFLLEVBQUUsV0FBVztJQUNsQixlQUFlLEVBQUUsQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDO0lBQ3ZDLGdCQUFnQixFQUFFLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQztDQUN6QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNkayA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2NkaycpO1xuaW1wb3J0IGN4YXBpID0gcmVxdWlyZSgnQGF3cy1jZGsvY3gtYXBpJyk7XG5pbXBvcnQgeyBWcGNBdHRyaWJ1dGVzIH0gZnJvbSAnLi92cGMnO1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGxvb2tpbmcgdXAgYW4gZXhpc3RpbmcgVlBDLlxuICpcbiAqIFRoZSBjb21iaW5hdGlvbiBvZiBwcm9wZXJ0aWVzIG11c3Qgc3BlY2lmeSBmaWx0ZXIgZG93biB0byBleGFjdGx5IG9uZVxuICogbm9uLWRlZmF1bHQgVlBDLCBvdGhlcndpc2UgYW4gZXJyb3IgaXMgcmFpc2VkLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFZwY0xvb2t1cE9wdGlvbnMge1xuICAvKipcbiAgICogVGhlIElEIG9mIHRoZSBWUENcbiAgICpcbiAgICogSWYgZ2l2ZW4sIHdpbGwgaW1wb3J0IGV4YWN0bHkgdGhpcyBWUEMuXG4gICAqXG4gICAqIEBkZWZhdWx0IERvbid0IGZpbHRlciBvbiB2cGNJZFxuICAgKi9cbiAgcmVhZG9ubHkgdnBjSWQ/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBWUENcbiAgICpcbiAgICogSWYgZ2l2ZW4sIHdpbGwgaW1wb3J0IHRoZSBWUEMgd2l0aCB0aGlzIG5hbWUuXG4gICAqXG4gICAqIEBkZWZhdWx0IERvbid0IGZpbHRlciBvbiB2cGNOYW1lXG4gICAqL1xuICByZWFkb25seSB2cGNOYW1lPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUYWdzIG9uIHRoZSBWUENcbiAgICpcbiAgICogVGhlIFZQQyBtdXN0IGhhdmUgYWxsIG9mIHRoZXNlIHRhZ3NcbiAgICpcbiAgICogQGRlZmF1bHQgRG9uJ3QgZmlsdGVyIG9uIHRhZ3NcbiAgICovXG4gIHJlYWRvbmx5IHRhZ3M/OiB7W2tleTogc3RyaW5nXTogc3RyaW5nfTtcblxuICAvKipcbiAgICogV2hldGhlciB0byBtYXRjaCB0aGUgZGVmYXVsdCBWUENcbiAgICpcbiAgICogQGRlZmF1bHQgRG9uJ3QgY2FyZSB3aGV0aGVyIHdlIHJldHVybiB0aGUgZGVmYXVsdCBWUENcbiAgICovXG4gIHJlYWRvbmx5IGlzRGVmYXVsdD86IGJvb2xlYW47XG59XG5cbi8qKlxuICogQ29udGV4dCBwcm92aWRlciB0byBkaXNjb3ZlciBhbmQgaW1wb3J0IGV4aXN0aW5nIFZQQ3NcbiAqL1xuZXhwb3J0IGNsYXNzIFZwY05ldHdvcmtQcm92aWRlciB7XG4gIHByaXZhdGUgcHJvdmlkZXI6IGNkay5Db250ZXh0UHJvdmlkZXI7XG5cbiAgY29uc3RydWN0b3IoY29udGV4dDogY2RrLkNvbnN0cnVjdCwgb3B0aW9uczogVnBjTG9va3VwT3B0aW9ucykge1xuICAgIGNvbnN0IGZpbHRlcjoge1trZXk6IHN0cmluZ106IHN0cmluZ30gPSBvcHRpb25zLnRhZ3MgfHwge307XG5cbiAgICAvLyBXZSBnaXZlIHNwZWNpYWwgdHJlYXRtZW50IHRvIHNvbWUgdGFnc1xuICAgIGlmIChvcHRpb25zLnZwY0lkKSB7IGZpbHRlclsndnBjLWlkJ10gPSBvcHRpb25zLnZwY0lkOyB9XG4gICAgaWYgKG9wdGlvbnMudnBjTmFtZSkgeyBmaWx0ZXJbJ3RhZzpOYW1lJ10gPSBvcHRpb25zLnZwY05hbWU7IH1cbiAgICBpZiAob3B0aW9ucy5pc0RlZmF1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgZmlsdGVyLmlzRGVmYXVsdCA9IG9wdGlvbnMuaXNEZWZhdWx0ID8gJ3RydWUnIDogJ2ZhbHNlJztcbiAgICB9XG5cbiAgICB0aGlzLnByb3ZpZGVyID0gbmV3IGNkay5Db250ZXh0UHJvdmlkZXIoY29udGV4dCwgY3hhcGkuVlBDX1BST1ZJREVSLCB7IGZpbHRlciB9IGFzIGN4YXBpLlZwY0NvbnRleHRRdWVyeSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBWUEMgaW1wb3J0IHByb3BzIG1hdGNoaW5nIHRoZSBmaWx0ZXJcbiAgICovXG4gIHB1YmxpYyBnZXQgdnBjUHJvcHMoKTogVnBjQXR0cmlidXRlcyB7XG4gICAgY29uc3QgcmV0OiBjeGFwaS5WcGNDb250ZXh0UmVzcG9uc2UgPSB0aGlzLnByb3ZpZGVyLmdldFZhbHVlKERVTU1ZX1ZQQ19QUk9QUyk7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxufVxuXG4vKipcbiAqIFRoZXJlIGFyZSByZXR1cm5lZCB3aGVuIHRoZSBwcm92aWRlciBoYXMgbm90IHN1cHBsaWVkIHByb3BzIHlldFxuICpcbiAqIEl0J3Mgb25seSB1c2VkIGZvciB0ZXN0aW5nIGFuZCBvbiB0aGUgZmlyc3QgcnVuLXRocm91Z2guXG4gKi9cbmNvbnN0IERVTU1ZX1ZQQ19QUk9QUzogY3hhcGkuVnBjQ29udGV4dFJlc3BvbnNlID0ge1xuICBhdmFpbGFiaWxpdHlab25lczogWydkdW1teS0xYScsICdkdW1teS0xYiddLFxuICB2cGNJZDogJ3ZwYy0xMjM0NScsXG4gIHB1YmxpY1N1Ym5ldElkczogWydzLTEyMzQ1JywgJ3MtNjc4OTAnXSxcbiAgcHJpdmF0ZVN1Ym5ldElkczogWydwLTEyMzQ1JywgJ3AtNjc4OTAnXSxcbn07XG4iXX0=