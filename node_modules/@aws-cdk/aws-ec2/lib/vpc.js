"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/cdk");
const cdk_1 = require("@aws-cdk/cdk");
const ec2_generated_1 = require("./ec2.generated");
const ec2_generated_2 = require("./ec2.generated");
const network_util_1 = require("./network-util");
const util_1 = require("./util");
const vpc_endpoint_1 = require("./vpc-endpoint");
const vpc_endpoint_2 = require("./vpc-endpoint");
const vpc_network_provider_1 = require("./vpc-network-provider");
const vpn_1 = require("./vpn");
const VPC_SUBNET_SYMBOL = Symbol.for('@aws-cdk/aws-ec2.VpcSubnet');
/**
 * The type of Subnet
 */
var SubnetType;
(function (SubnetType) {
    /**
     * Isolated Subnets do not route Outbound traffic
     *
     * This can be good for subnets with RDS or
     * Elasticache endpoints
     */
    SubnetType["Isolated"] = "Isolated";
    /**
     * Subnet that routes to the internet, but not vice versa.
     *
     * Instances in a private subnet can connect to the Internet, but will not
     * allow connections to be initiated from the Internet.
     *
     * Outbound traffic will be routed via a NAT Gateway. Preference being in
     * the same AZ, but if not available will use another AZ (control by
     * specifing `maxGateways` on VpcNetwork). This might be used for
     * experimental cost conscious accounts or accounts where HA outbound
     * traffic is not needed.
     */
    SubnetType["Private"] = "Private";
    /**
     * Subnet connected to the Internet
     *
     * Instances in a Public subnet can connect to the Internet and can be
     * connected to from the Internet as long as they are launched with public
     * IPs (controlled on the AutoScalingGroup or other constructs that launch
     * instances).
     *
     * Public subnets route outbound traffic via an Internet Gateway.
     */
    SubnetType["Public"] = "Public";
})(SubnetType = exports.SubnetType || (exports.SubnetType = {}));
/**
 * A new or imported VPC
 */
class VpcBase extends cdk_1.Resource {
    constructor() {
        super(...arguments);
        /**
         * Dependencies for internet connectivity
         */
        this.internetDependencies = new Array();
        /**
         * Dependencies for NAT connectivity
         */
        this.natDependencies = new Array();
    }
    selectSubnetIds(selection) {
        return this.selectSubnets(selection).subnetIds;
    }
    /**
     * Returns IDs of selected subnets
     */
    selectSubnets(selection = {}) {
        const subnets = this.selectSubnetObjects(selection);
        return {
            subnetIds: subnets.map(s => s.subnetId),
            availabilityZones: subnets.map(s => s.availabilityZone),
            routeTableIds: subnets.map(s => s.routeTableId).filter(notUndefined),
            internetConnectedDependency: tap(new CompositeDependable(), d => subnets.forEach(s => d.add(s.internetConnectivityEstablished))),
        };
    }
    /**
     * Adds a new VPN connection to this VPC
     */
    addVpnConnection(id, options) {
        return new vpn_1.VpnConnection(this, id, {
            vpc: this,
            ...options
        });
    }
    /**
     * Adds a new interface endpoint to this VPC
     */
    addInterfaceEndpoint(id, options) {
        return new vpc_endpoint_2.InterfaceVpcEndpoint(this, id, {
            vpc: this,
            ...options
        });
    }
    /**
     * Return whether all of the given subnets are from the VPC's public subnets.
     */
    isPublicSubnets(subnetIds) {
        const pubIds = new Set(this.publicSubnets.map(n => n.subnetId));
        return subnetIds.every(pubIds.has.bind(pubIds));
    }
    /**
     * The region where this VPC is defined
     */
    get region() {
        return cdk_1.Stack.of(this).region;
    }
    /**
     * Return the subnets appropriate for the placement strategy
     */
    selectSubnetObjects(selection = {}) {
        selection = reifySelectionDefaults(selection);
        let subnets = [];
        if (selection.subnetName !== undefined) { // Select by name
            const allSubnets = [...this.publicSubnets, ...this.privateSubnets, ...this.isolatedSubnets];
            subnets = allSubnets.filter(s => util_1.subnetName(s) === selection.subnetName);
        }
        else { // Select by type
            subnets = {
                [SubnetType.Isolated]: this.isolatedSubnets,
                [SubnetType.Private]: this.privateSubnets,
                [SubnetType.Public]: this.publicSubnets,
            }[selection.subnetType || SubnetType.Private];
            if (selection.onePerAz && subnets.length > 0) {
                // Restrict to at most one subnet group
                subnets = subnets.filter(s => util_1.subnetName(s) === util_1.subnetName(subnets[0]));
            }
        }
        if (subnets.length === 0) {
            throw new Error(`There are no ${describeSelection(selection)} in this VPC. Use a different VPC subnet selection.`);
        }
        return subnets;
    }
}
/**
 * Name tag constant
 */
const NAME_TAG = 'Name';
/**
 * The default tenancy of instances launched into the VPC.
 */
var DefaultInstanceTenancy;
(function (DefaultInstanceTenancy) {
    /**
     * Instances can be launched with any tenancy.
     */
    DefaultInstanceTenancy["Default"] = "default";
    /**
     * Any instance launched into the VPC automatically has dedicated tenancy, unless you launch it with the default tenancy.
     */
    DefaultInstanceTenancy["Dedicated"] = "dedicated";
})(DefaultInstanceTenancy = exports.DefaultInstanceTenancy || (exports.DefaultInstanceTenancy = {}));
/**
 * VpcNetwork deploys an AWS VPC, with public and private subnets per Availability Zone.
 * For example:
 *
 * import { Vpc } from '@aws-cdk/aws-ec2'
 *
 * const vpc = new Vpc(this, {
 *   cidr: "10.0.0.0/16"
 * })
 *
 * // Iterate the public subnets
 * for (let subnet of vpc.publicSubnets) {
 *
 * }
 *
 * // Iterate the private subnets
 * for (let subnet of vpc.privateSubnets) {
 *
 * }
 *
 * @resource AWS::EC2::VPC
 */
class Vpc extends VpcBase {
    /**
     * VpcNetwork creates a VPC that spans a whole region.
     * It will automatically divide the provided VPC CIDR range, and create public and private subnets per Availability Zone.
     * Network routing for the public subnets will be configured to allow outbound access directly via an Internet Gateway.
     * Network routing for the private subnets will be configured to allow outbound access via a set of resilient NAT Gateways (one per AZ).
     */
    constructor(scope, id, props = {}) {
        super(scope, id);
        /**
         * List of public subnets in this VPC
         */
        this.publicSubnets = [];
        /**
         * List of private subnets in this VPC
         */
        this.privateSubnets = [];
        /**
         * List of isolated subnets in this VPC
         */
        this.isolatedSubnets = [];
        /**
         * Mapping of NatGateway by AZ
         */
        this.natGatewayByAZ = {};
        /**
         * Subnet configurations for this VPC
         */
        this.subnetConfiguration = [];
        // Can't have enabledDnsHostnames without enableDnsSupport
        if (props.enableDnsHostnames && !props.enableDnsSupport) {
            throw new Error('To use DNS Hostnames, DNS Support must be enabled, however, it was explicitly disabled.');
        }
        const cidrBlock = ifUndefined(props.cidr, Vpc.DEFAULT_CIDR_RANGE);
        this.networkBuilder = new network_util_1.NetworkBuilder(cidrBlock);
        const enableDnsHostnames = props.enableDnsHostnames == null ? true : props.enableDnsHostnames;
        const enableDnsSupport = props.enableDnsSupport == null ? true : props.enableDnsSupport;
        const instanceTenancy = props.defaultInstanceTenancy || 'default';
        // Define a VPC using the provided CIDR range
        this.resource = new ec2_generated_2.CfnVPC(this, 'Resource', {
            cidrBlock,
            enableDnsHostnames,
            enableDnsSupport,
            instanceTenancy,
        });
        this.vpcDefaultNetworkAcl = this.resource.attrDefaultNetworkAcl;
        this.vpcCidrBlockAssociations = this.resource.attrCidrBlockAssociations;
        this.vpcCidrBlock = this.resource.attrCidrBlock;
        this.vpcDefaultSecurityGroup = this.resource.attrDefaultSecurityGroup;
        this.vpcIpv6CidrBlocks = this.resource.attrIpv6CidrBlocks;
        this.node.applyAspect(new cdk.Tag(NAME_TAG, this.node.path));
        this.availabilityZones = cdk.Context.getAvailabilityZones(this);
        const maxAZs = props.maxAZs !== undefined ? props.maxAZs : 3;
        this.availabilityZones = this.availabilityZones.slice(0, maxAZs);
        this.vpcId = this.resource.refAsString;
        this.subnetConfiguration = ifUndefined(props.subnetConfiguration, Vpc.DEFAULT_SUBNETS);
        // subnetConfiguration and natGateways must be set before calling createSubnets
        this.createSubnets();
        const allowOutbound = this.subnetConfiguration.filter(subnet => (subnet.subnetType !== SubnetType.Isolated)).length > 0;
        // Create an Internet Gateway and attach it if necessary
        if (allowOutbound) {
            const igw = new ec2_generated_1.CfnInternetGateway(this, 'IGW', {});
            this.internetDependencies.push(igw);
            const att = new ec2_generated_2.CfnVPCGatewayAttachment(this, 'VPCGW', {
                internetGatewayId: igw.refAsString,
                vpcId: this.resource.refAsString
            });
            this.publicSubnets.forEach(publicSubnet => {
                publicSubnet.addDefaultInternetRoute(igw.refAsString, att);
            });
            // if gateways are needed create them
            this.createNatGateways(props.natGateways, props.natGatewaySubnets);
            this.privateSubnets.forEach((privateSubnet, i) => {
                let ngwId = this.natGatewayByAZ[privateSubnet.availabilityZone];
                if (ngwId === undefined) {
                    const ngwArray = Array.from(Object.values(this.natGatewayByAZ));
                    // round robin the available NatGW since one is not in your AZ
                    ngwId = ngwArray[i % ngwArray.length];
                }
                privateSubnet.addDefaultNatRoute(ngwId);
            });
        }
        if ((props.vpnConnections || props.vpnGatewayAsn) && props.vpnGateway === false) {
            throw new Error('Cannot specify `vpnConnections` or `vpnGatewayAsn` when `vpnGateway` is set to false.');
        }
        if (props.vpnGateway || props.vpnConnections || props.vpnGatewayAsn) {
            const vpnGateway = new ec2_generated_1.CfnVPNGateway(this, 'VpnGateway', {
                amazonSideAsn: props.vpnGatewayAsn,
                type: vpn_1.VpnConnectionType.IPsec1
            });
            const attachment = new ec2_generated_2.CfnVPCGatewayAttachment(this, 'VPCVPNGW', {
                vpcId: this.vpcId,
                vpnGatewayId: vpnGateway.refAsString,
            });
            this.vpnGatewayId = vpnGateway.refAsString;
            // Propagate routes on route tables associated with the right subnets
            const vpnRoutePropagation = props.vpnRoutePropagation || [{ subnetType: SubnetType.Private }];
            const routeTableIds = [...new Set(Array().concat(...vpnRoutePropagation.map(s => this.selectSubnets(s).routeTableIds)))];
            const routePropagation = new ec2_generated_1.CfnVPNGatewayRoutePropagation(this, 'RoutePropagation', {
                routeTableIds,
                vpnGatewayId: this.vpnGatewayId
            });
            // The AWS::EC2::VPNGatewayRoutePropagation resource cannot use the VPN gateway
            // until it has successfully attached to the VPC.
            // See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpn-gatewayrouteprop.html
            routePropagation.node.addDependency(attachment);
            const vpnConnections = props.vpnConnections || {};
            for (const [connectionId, connection] of Object.entries(vpnConnections)) {
                this.addVpnConnection(connectionId, connection);
            }
        }
        // Allow creation of gateway endpoints on VPC instantiation as those can be
        // immediately functional without further configuration. This is not the case
        // for interface endpoints where the security group must be configured.
        if (props.gatewayEndpoints) {
            const gatewayEndpoints = props.gatewayEndpoints || {};
            for (const [endpointId, endpoint] of Object.entries(gatewayEndpoints)) {
                this.addGatewayEndpoint(endpointId, endpoint);
            }
        }
    }
    /**
     * Import an exported VPC
     */
    static fromVpcAttributes(scope, id, attrs) {
        return new ImportedVpc(scope, id, attrs);
    }
    /**
     * Import an existing VPC from by querying the AWS environment this stack is deployed to.
     */
    static fromLookup(scope, id, options) {
        return Vpc.fromVpcAttributes(scope, id, new vpc_network_provider_1.VpcNetworkProvider(scope, options).vpcProps);
    }
    /**
     * Adds a new gateway endpoint to this VPC
     */
    addGatewayEndpoint(id, options) {
        return new vpc_endpoint_1.GatewayVpcEndpoint(this, id, {
            vpc: this,
            ...options
        });
    }
    /**
     * Adds a new S3 gateway endpoint to this VPC
     */
    addS3Endpoint(id, subnets) {
        return new vpc_endpoint_1.GatewayVpcEndpoint(this, id, {
            service: vpc_endpoint_1.GatewayVpcEndpointAwsService.S3,
            vpc: this,
            subnets
        });
    }
    /**
     * Adds a new DynamoDB gateway endpoint to this VPC
     */
    addDynamoDbEndpoint(id, subnets) {
        return new vpc_endpoint_1.GatewayVpcEndpoint(this, id, {
            service: vpc_endpoint_1.GatewayVpcEndpointAwsService.DynamoDb,
            vpc: this,
            subnets
        });
    }
    createNatGateways(gateways, placement) {
        const useNatGateway = this.subnetConfiguration.filter(subnet => (subnet.subnetType === SubnetType.Private)).length > 0;
        const natCount = ifUndefined(gateways, useNatGateway ? this.availabilityZones.length : 0);
        let natSubnets;
        if (placement) {
            const subnets = this.selectSubnetObjects(placement);
            for (const sub of subnets) {
                if (this.publicSubnets.indexOf(sub) === -1) {
                    throw new Error(`natGatewayPlacement ${placement} contains non public subnet ${sub}`);
                }
            }
            natSubnets = subnets;
        }
        else {
            natSubnets = this.publicSubnets;
        }
        natSubnets = natSubnets.slice(0, natCount);
        for (const sub of natSubnets) {
            const gateway = sub.addNatGateway();
            this.natGatewayByAZ[sub.availabilityZone] = gateway.refAsString;
            this.natDependencies.push(gateway);
        }
    }
    /**
     * createSubnets creates the subnets specified by the subnet configuration
     * array or creates the `DEFAULT_SUBNETS` configuration
     */
    createSubnets() {
        const remainingSpaceSubnets = [];
        for (const subnet of this.subnetConfiguration) {
            if (subnet.cidrMask === undefined) {
                remainingSpaceSubnets.push(subnet);
                continue;
            }
            this.createSubnetResources(subnet, subnet.cidrMask);
        }
        const totalRemaining = remainingSpaceSubnets.length * this.availabilityZones.length;
        const cidrMaskForRemaing = this.networkBuilder.maskForRemainingSubnets(totalRemaining);
        for (const subnet of remainingSpaceSubnets) {
            this.createSubnetResources(subnet, cidrMaskForRemaing);
        }
    }
    createSubnetResources(subnetConfig, cidrMask) {
        this.availabilityZones.forEach((zone, index) => {
            if (subnetConfig.reserved === true) {
                // For reserved subnets, just allocate ip space but do not create any resources
                this.networkBuilder.addSubnet(cidrMask);
                return;
            }
            const name = util_1.subnetId(subnetConfig.name, index);
            const subnetProps = {
                availabilityZone: zone,
                vpcId: this.vpcId,
                cidrBlock: this.networkBuilder.addSubnet(cidrMask),
                mapPublicIpOnLaunch: (subnetConfig.subnetType === SubnetType.Public),
            };
            let subnet;
            switch (subnetConfig.subnetType) {
                case SubnetType.Public:
                    const publicSubnet = new PublicSubnet(this, name, subnetProps);
                    this.publicSubnets.push(publicSubnet);
                    subnet = publicSubnet;
                    break;
                case SubnetType.Private:
                    const privateSubnet = new PrivateSubnet(this, name, subnetProps);
                    this.privateSubnets.push(privateSubnet);
                    subnet = privateSubnet;
                    break;
                case SubnetType.Isolated:
                    const isolatedSubnet = new PrivateSubnet(this, name, subnetProps);
                    this.isolatedSubnets.push(isolatedSubnet);
                    subnet = isolatedSubnet;
                    break;
                default:
                    throw new Error(`Unrecognized subnet type: ${subnetConfig.subnetType}`);
            }
            // These values will be used to recover the config upon provider import
            const includeResourceTypes = [ec2_generated_2.CfnSubnet.cfnResourceTypeName];
            subnet.node.applyAspect(new cdk.Tag(SUBNETNAME_TAG, subnetConfig.name, { includeResourceTypes }));
            subnet.node.applyAspect(new cdk.Tag(SUBNETTYPE_TAG, subnetTypeTagValue(subnetConfig.subnetType), { includeResourceTypes }));
        });
    }
}
/**
 * The default CIDR range used when creating VPCs.
 * This can be overridden using VpcNetworkProps when creating a VPCNetwork resource.
 * e.g. new VpcResource(this, { cidr: '192.168.0.0./16' })
 */
Vpc.DEFAULT_CIDR_RANGE = '10.0.0.0/16';
/**
 * The default subnet configuration
 *
 * 1 Public and 1 Private subnet per AZ evenly split
 */
Vpc.DEFAULT_SUBNETS = [
    {
        subnetType: SubnetType.Public,
        name: util_1.defaultSubnetName(SubnetType.Public),
    },
    {
        subnetType: SubnetType.Private,
        name: util_1.defaultSubnetName(SubnetType.Private),
    }
];
exports.Vpc = Vpc;
const SUBNETTYPE_TAG = 'aws-cdk:subnet-type';
const SUBNETNAME_TAG = 'aws-cdk:subnet-name';
function subnetTypeTagValue(type) {
    switch (type) {
        case SubnetType.Public: return 'Public';
        case SubnetType.Private: return 'Private';
        case SubnetType.Isolated: return 'Isolated';
    }
}
/**
 * Represents a new VPC subnet resource
 *
 * @resource AWS::EC2::Subnet
 */
class Subnet extends cdk.Resource {
    constructor(scope, id, props) {
        super(scope, id);
        /**
         * Parts of this VPC subnet
         */
        this.dependencyElements = [];
        this.internetDependencies = new cdk_1.ConcreteDependable();
        Object.defineProperty(this, VPC_SUBNET_SYMBOL, { value: true });
        this.node.applyAspect(new cdk.Tag(NAME_TAG, this.node.path));
        this.availabilityZone = props.availabilityZone;
        const subnet = new ec2_generated_2.CfnSubnet(this, 'Subnet', {
            vpcId: props.vpcId,
            cidrBlock: props.cidrBlock,
            availabilityZone: props.availabilityZone,
            mapPublicIpOnLaunch: props.mapPublicIpOnLaunch,
        });
        this.subnetId = subnet.refAsString;
        this.subnetVpcId = subnet.attrVpcId;
        this.subnetAvailabilityZone = subnet.attrAvailabilityZone;
        this.subnetIpv6CidrBlocks = subnet.attrIpv6CidrBlocks;
        this.subnetNetworkAclAssociationId = subnet.attrNetworkAclAssociationId;
        const table = new ec2_generated_2.CfnRouteTable(this, 'RouteTable', {
            vpcId: props.vpcId,
        });
        this.routeTableId = table.refAsString;
        // Associate the public route table for this subnet, to this subnet
        new ec2_generated_2.CfnSubnetRouteTableAssociation(this, 'RouteTableAssociation', {
            subnetId: this.subnetId,
            routeTableId: table.refAsString
        });
    }
    static isVpcSubnet(x) {
        return VPC_SUBNET_SYMBOL in x;
    }
    static fromSubnetAttributes(scope, id, attrs) {
        return new ImportedSubnet(scope, id, attrs);
    }
    get internetConnectivityEstablished() {
        return this.internetDependencies;
    }
    /**
     * Create a default route that points to a passed IGW, with a dependency
     * on the IGW's attachment to the VPC.
     *
     * @param gatewayId the logical ID (ref) of the gateway attached to your VPC
     * @param gatewayAttachment the gateway attachment construct to be added as a dependency
     */
    addDefaultInternetRoute(gatewayId, gatewayAttachment) {
        const route = new ec2_generated_1.CfnRoute(this, `DefaultRoute`, {
            routeTableId: this.routeTableId,
            destinationCidrBlock: '0.0.0.0/0',
            gatewayId
        });
        route.node.addDependency(gatewayAttachment);
        // Since the 'route' depends on the gateway attachment, just
        // depending on the route is enough.
        this.internetDependencies.add(route);
    }
    /**
     * Adds an entry to this subnets route table that points to the passed NATGatwayId
     * @param natGatewayId The ID of the NAT gateway
     */
    addDefaultNatRoute(natGatewayId) {
        const route = new ec2_generated_1.CfnRoute(this, `DefaultRoute`, {
            routeTableId: this.routeTableId,
            destinationCidrBlock: '0.0.0.0/0',
            natGatewayId
        });
        this.internetDependencies.add(route);
    }
}
exports.Subnet = Subnet;
/**
 * Represents a public VPC subnet resource
 */
class PublicSubnet extends Subnet {
    static fromPublicSubnetAttributes(scope, id, attrs) {
        return new ImportedSubnet(scope, id, attrs);
    }
    constructor(scope, id, props) {
        super(scope, id, props);
    }
    /**
     * Creates a new managed NAT gateway attached to this public subnet.
     * Also adds the EIP for the managed NAT.
     * @returns A ref to the the NAT Gateway ID
     */
    addNatGateway() {
        // Create a NAT Gateway in this public subnet
        const ngw = new ec2_generated_1.CfnNatGateway(this, `NATGateway`, {
            subnetId: this.subnetId,
            allocationId: new ec2_generated_1.CfnEIP(this, `EIP`, {
                domain: 'vpc'
            }).attrAllocationId,
        });
        return ngw;
    }
}
exports.PublicSubnet = PublicSubnet;
/**
 * Represents a private VPC subnet resource
 */
class PrivateSubnet extends Subnet {
    static fromPrivateSubnetAttributes(scope, id, attrs) {
        return new ImportedSubnet(scope, id, attrs);
    }
    constructor(scope, id, props) {
        super(scope, id, props);
    }
}
exports.PrivateSubnet = PrivateSubnet;
function ifUndefined(value, defaultValue) {
    return value !== undefined ? value : defaultValue;
}
class ImportedVpc extends VpcBase {
    constructor(scope, id, props) {
        super(scope, id);
        this.vpcId = props.vpcId;
        this.availabilityZones = props.availabilityZones;
        this.vpnGatewayId = props.vpnGatewayId;
        // tslint:disable:max-line-length
        const pub = new util_1.ImportSubnetGroup(props.publicSubnetIds, props.publicSubnetNames, SubnetType.Public, this.availabilityZones, 'publicSubnetIds', 'publicSubnetNames');
        const priv = new util_1.ImportSubnetGroup(props.privateSubnetIds, props.privateSubnetNames, SubnetType.Private, this.availabilityZones, 'privateSubnetIds', 'privateSubnetNames');
        const iso = new util_1.ImportSubnetGroup(props.isolatedSubnetIds, props.isolatedSubnetNames, SubnetType.Isolated, this.availabilityZones, 'isolatedSubnetIds', 'isolatedSubnetNames');
        // tslint:enable:max-line-length
        this.publicSubnets = pub.import(this);
        this.privateSubnets = priv.import(this);
        this.isolatedSubnets = iso.import(this);
    }
}
/**
 * If the placement strategy is completely "default", reify the defaults so
 * consuming code doesn't have to reimplement the same analysis every time.
 *
 * Returns "private subnets" by default.
 */
function reifySelectionDefaults(placement) {
    if (placement.subnetType !== undefined && placement.subnetName !== undefined) {
        throw new Error('Only one of subnetType and subnetName can be supplied');
    }
    if (placement.subnetType === undefined && placement.subnetName === undefined) {
        return { subnetType: SubnetType.Private, onePerAz: placement.onePerAz };
    }
    return placement;
}
/**
 * Describe the given placement strategy
 */
function describeSelection(placement) {
    if (placement.subnetType !== undefined) {
        return `'${util_1.defaultSubnetName(placement.subnetType)}' subnets`;
    }
    if (placement.subnetName !== undefined) {
        return `subnets named '${placement.subnetName}'`;
    }
    return JSON.stringify(placement);
}
class CompositeDependable {
    constructor() {
        this.dependables = new Array();
        const self = this;
        cdk.DependableTrait.implement(this, {
            get dependencyRoots() {
                const ret = [];
                for (const dep of self.dependables) {
                    ret.push(...cdk.DependableTrait.get(dep).dependencyRoots);
                }
                return ret;
            }
        });
    }
    /**
     * Add a construct to the dependency roots
     */
    add(dep) {
        this.dependables.push(dep);
    }
}
/**
 * Invoke a function on a value (for its side effect) and return the value
 */
function tap(x, fn) {
    fn(x);
    return x;
}
function notUndefined(x) {
    return x !== undefined;
}
class ImportedSubnet extends cdk.Resource {
    constructor(scope, id, attrs) {
        super(scope, id);
        this.internetConnectivityEstablished = new cdk.ConcreteDependable();
        this.routeTableId = undefined;
        this.availabilityZone = attrs.availabilityZone;
        this.subnetId = attrs.subnetId;
    }
}
//# sourceMappingURL=data:application/json;base64,