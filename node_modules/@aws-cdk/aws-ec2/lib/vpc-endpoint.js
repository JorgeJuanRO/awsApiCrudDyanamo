"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const iam = require("@aws-cdk/aws-iam");
const cdk_1 = require("@aws-cdk/cdk");
const connections_1 = require("./connections");
const ec2_generated_1 = require("./ec2.generated");
const security_group_1 = require("./security-group");
const security_group_rule_1 = require("./security-group-rule");
const vpc_1 = require("./vpc");
class VpcEndpoint extends cdk_1.Resource {
    /**
     * Adds a statement to the policy document of the VPC endpoint. The statement
     * must have a Principal.
     *
     * Not all interface VPC endpoints support policy. For more information
     * see https://docs.aws.amazon.com/vpc/latest/userguide/vpce-interface.html
     *
     * @param statement the IAM statement to add
     */
    addToPolicy(statement) {
        if (!statement.hasPrincipal) {
            throw new Error('Statement must have a `Principal`.');
        }
        if (!this.policyDocument) {
            this.policyDocument = new iam.PolicyDocument();
        }
        this.policyDocument.addStatements(statement);
    }
}
exports.VpcEndpoint = VpcEndpoint;
/**
 * The type of VPC endpoint.
 */
var VpcEndpointType;
(function (VpcEndpointType) {
    /**
     * Interface
     *
     * An interface endpoint is an elastic network interface with a private IP
     * address that serves as an entry point for traffic destined to a supported
     * service.
     */
    VpcEndpointType["Interface"] = "Interface";
    /**
     * Gateway
     *
     * A gateway endpoint is a gateway that is a target for a specified route in
     * your route table, used for traffic destined to a supported AWS service.
     */
    VpcEndpointType["Gateway"] = "Gateway";
})(VpcEndpointType = exports.VpcEndpointType || (exports.VpcEndpointType = {}));
/**
 * An AWS service for a gateway VPC endpoint.
 */
class GatewayVpcEndpointAwsService {
    constructor(name, prefix) {
        this.name = `${prefix || 'com.amazonaws'}.${cdk_1.Aws.region}.${name}`;
    }
}
GatewayVpcEndpointAwsService.DynamoDb = new GatewayVpcEndpointAwsService('dynamodb');
GatewayVpcEndpointAwsService.S3 = new GatewayVpcEndpointAwsService('s3');
exports.GatewayVpcEndpointAwsService = GatewayVpcEndpointAwsService;
/**
 * A gateway VPC endpoint.
 * @resource AWS::EC2::VPCEndpoint
 */
class GatewayVpcEndpoint extends VpcEndpoint {
    static fromGatewayVpcEndpointId(scope, id, gatewayVpcEndpointId) {
        class Import extends VpcEndpoint {
            constructor() {
                super(...arguments);
                this.vpcEndpointId = gatewayVpcEndpointId;
            }
        }
        return new Import(scope, id);
    }
    constructor(scope, id, props) {
        super(scope, id);
        const subnets = props.subnets || [{ subnetType: vpc_1.SubnetType.Private }];
        const routeTableIds = [...new Set(Array().concat(...subnets.map(s => props.vpc.selectSubnets(s).routeTableIds)))];
        if (routeTableIds.length === 0) {
            throw new Error(`Can't add a gateway endpoint to VPC; route table IDs are not available`);
        }
        const endpoint = new ec2_generated_1.CfnVPCEndpoint(this, 'Resource', {
            policyDocument: cdk_1.Lazy.anyValue({ produce: () => this.policyDocument }),
            routeTableIds,
            serviceName: props.service.name,
            vpcEndpointType: VpcEndpointType.Gateway,
            vpcId: props.vpc.vpcId
        });
        this.vpcEndpointId = endpoint.refAsString;
        this.vpcEndpointCreationTimestamp = endpoint.attrCreationTimestamp;
        this.vpcEndpointDnsEntries = endpoint.attrDnsEntries;
        this.vpcEndpointNetworkInterfaceIds = endpoint.attrNetworkInterfaceIds;
    }
}
exports.GatewayVpcEndpoint = GatewayVpcEndpoint;
/**
 * An AWS service for an interface VPC endpoint.
 */
class InterfaceVpcEndpointAwsService {
    constructor(name, prefix, port) {
        this.name = `${prefix || 'com.amazonaws'}.${cdk_1.Aws.region}.${name}`;
        this.port = port || 443;
    }
}
InterfaceVpcEndpointAwsService.SageMakerNotebook = new InterfaceVpcEndpointAwsService('notebook', 'aws.sagemaker');
InterfaceVpcEndpointAwsService.CloudFormation = new InterfaceVpcEndpointAwsService('cloudformation');
InterfaceVpcEndpointAwsService.CloudTrail = new InterfaceVpcEndpointAwsService('cloudtrail');
InterfaceVpcEndpointAwsService.CodeBuild = new InterfaceVpcEndpointAwsService('codebuild');
InterfaceVpcEndpointAwsService.CodeBuildFips = new InterfaceVpcEndpointAwsService('codebuil-fips');
InterfaceVpcEndpointAwsService.CodeCommit = new InterfaceVpcEndpointAwsService('codecommit');
InterfaceVpcEndpointAwsService.CodeCommitFips = new InterfaceVpcEndpointAwsService('codecommit-fips');
InterfaceVpcEndpointAwsService.CodePipeline = new InterfaceVpcEndpointAwsService('codepipeline');
InterfaceVpcEndpointAwsService.Config = new InterfaceVpcEndpointAwsService('config');
InterfaceVpcEndpointAwsService.Ec2 = new InterfaceVpcEndpointAwsService('ec2');
InterfaceVpcEndpointAwsService.Ec2Messages = new InterfaceVpcEndpointAwsService('ec2messages');
InterfaceVpcEndpointAwsService.Ecr = new InterfaceVpcEndpointAwsService('ecr.api');
InterfaceVpcEndpointAwsService.EcrDocker = new InterfaceVpcEndpointAwsService('ecr.dkr');
InterfaceVpcEndpointAwsService.Ecs = new InterfaceVpcEndpointAwsService('ecs');
InterfaceVpcEndpointAwsService.EcsAgent = new InterfaceVpcEndpointAwsService('ecs-agent');
InterfaceVpcEndpointAwsService.EcsTelemetry = new InterfaceVpcEndpointAwsService('ecs-telemetry');
InterfaceVpcEndpointAwsService.ElasticInferenceRuntime = new InterfaceVpcEndpointAwsService('elastic-inference.runtime');
InterfaceVpcEndpointAwsService.ElasticLoadBalancing = new InterfaceVpcEndpointAwsService('elasticloadbalancing');
InterfaceVpcEndpointAwsService.CloudWatchEvents = new InterfaceVpcEndpointAwsService('events');
InterfaceVpcEndpointAwsService.ApiGateway = new InterfaceVpcEndpointAwsService('execute-api');
InterfaceVpcEndpointAwsService.CodeCommitGit = new InterfaceVpcEndpointAwsService('git-codecommit');
InterfaceVpcEndpointAwsService.CodeCommitGitFips = new InterfaceVpcEndpointAwsService('git-codecommit-fips');
InterfaceVpcEndpointAwsService.KinesisStreams = new InterfaceVpcEndpointAwsService('kinesis-streams');
InterfaceVpcEndpointAwsService.Kms = new InterfaceVpcEndpointAwsService('kms');
InterfaceVpcEndpointAwsService.CloudWatchLogs = new InterfaceVpcEndpointAwsService('logs');
InterfaceVpcEndpointAwsService.CloudWatch = new InterfaceVpcEndpointAwsService('monitoring');
InterfaceVpcEndpointAwsService.SageMakerApi = new InterfaceVpcEndpointAwsService('sagemaker.api');
InterfaceVpcEndpointAwsService.SageMakerRuntime = new InterfaceVpcEndpointAwsService('sagemaker.runtime');
InterfaceVpcEndpointAwsService.SageMakerRuntimeFips = new InterfaceVpcEndpointAwsService('sagemaker.runtime-fips');
InterfaceVpcEndpointAwsService.SecretsManager = new InterfaceVpcEndpointAwsService('secretsmanager');
InterfaceVpcEndpointAwsService.ServiceCatalog = new InterfaceVpcEndpointAwsService('servicecatalog');
InterfaceVpcEndpointAwsService.Sns = new InterfaceVpcEndpointAwsService('sns');
InterfaceVpcEndpointAwsService.Sqs = new InterfaceVpcEndpointAwsService('sqs');
InterfaceVpcEndpointAwsService.Ssm = new InterfaceVpcEndpointAwsService('ssm');
InterfaceVpcEndpointAwsService.SsmMessages = new InterfaceVpcEndpointAwsService('ssmmessages');
InterfaceVpcEndpointAwsService.Sts = new InterfaceVpcEndpointAwsService('sts');
InterfaceVpcEndpointAwsService.Transfer = new InterfaceVpcEndpointAwsService('transfer.server');
exports.InterfaceVpcEndpointAwsService = InterfaceVpcEndpointAwsService;
/**
 * A interface VPC endpoint.
 * @resource AWS::EC2::VPCEndpoint
 */
class InterfaceVpcEndpoint extends VpcEndpoint {
    /**
     * Imports an existing interface VPC endpoint.
     */
    static fromInterfaceVpcEndpointAttributes(scope, id, attrs) {
        class Import extends cdk_1.Resource {
            constructor() {
                super(...arguments);
                this.vpcEndpointId = attrs.vpcEndpointId;
                this.securityGroupId = attrs.securityGroupId;
                this.connections = new connections_1.Connections({
                    defaultPortRange: new security_group_rule_1.TcpPort(attrs.port),
                    securityGroups: [security_group_1.SecurityGroup.fromSecurityGroupId(this, 'SecurityGroup', attrs.securityGroupId)],
                });
            }
        }
        return new Import(scope, id);
    }
    constructor(scope, id, props) {
        super(scope, id);
        const securityGroup = new security_group_1.SecurityGroup(this, 'SecurityGroup', {
            vpc: props.vpc
        });
        this.securityGroupId = securityGroup.securityGroupId;
        this.connections = new connections_1.Connections({
            defaultPortRange: new security_group_rule_1.TcpPort(props.service.port),
            securityGroups: [securityGroup]
        });
        const subnets = props.vpc.selectSubnets({ ...props.subnets, onePerAz: true });
        const subnetIds = subnets.subnetIds;
        const endpoint = new ec2_generated_1.CfnVPCEndpoint(this, 'Resource', {
            privateDnsEnabled: props.privateDnsEnabled !== undefined ? props.privateDnsEnabled : true,
            policyDocument: cdk_1.Lazy.anyValue({ produce: () => this.policyDocument }),
            securityGroupIds: [this.securityGroupId],
            serviceName: props.service.name,
            vpcEndpointType: VpcEndpointType.Interface,
            subnetIds,
            vpcId: props.vpc.vpcId
        });
        this.vpcEndpointId = endpoint.refAsString;
        this.vpcEndpointCreationTimestamp = endpoint.attrCreationTimestamp;
        this.vpcEndpointDnsEntries = endpoint.attrDnsEntries;
        this.vpcEndpointNetworkInterfaceIds = endpoint.attrNetworkInterfaceIds;
    }
}
exports.InterfaceVpcEndpoint = InterfaceVpcEndpoint;
//# sourceMappingURL=data:application/json;base64,