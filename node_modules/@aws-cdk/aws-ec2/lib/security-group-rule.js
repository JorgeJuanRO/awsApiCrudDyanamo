"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk_1 = require("@aws-cdk/cdk");
const connections_1 = require("./connections");
/**
 * A connection to and from a given IP range
 */
class CidrIPv4 {
    constructor(cidrIp) {
        this.cidrIp = cidrIp;
        this.canInlineRule = true;
        this.connections = new connections_1.Connections({ securityGroupRule: this });
        this.uniqueId = cidrIp;
    }
    /**
     * Produce the ingress rule JSON for the given connection
     */
    toIngressRuleJSON() {
        return { cidrIp: this.cidrIp };
    }
    /**
     * Produce the egress rule JSON for the given connection
     */
    toEgressRuleJSON() {
        return { cidrIp: this.cidrIp };
    }
}
exports.CidrIPv4 = CidrIPv4;
/**
 * Any IPv4 address
 */
class AnyIPv4 extends CidrIPv4 {
    constructor() {
        super("0.0.0.0/0");
    }
}
exports.AnyIPv4 = AnyIPv4;
/**
 * A connection to a from a given IPv6 range
 */
class CidrIPv6 {
    constructor(cidrIpv6) {
        this.cidrIpv6 = cidrIpv6;
        this.canInlineRule = true;
        this.connections = new connections_1.Connections({ securityGroupRule: this });
        this.uniqueId = cidrIpv6;
    }
    /**
     * Produce the ingress rule JSON for the given connection
     */
    toIngressRuleJSON() {
        return { cidrIpv6: this.cidrIpv6 };
    }
    /**
     * Produce the egress rule JSON for the given connection
     */
    toEgressRuleJSON() {
        return { cidrIpv6: this.cidrIpv6 };
    }
}
exports.CidrIPv6 = CidrIPv6;
/**
 * Any IPv6 address
 */
class AnyIPv6 extends CidrIPv6 {
    constructor() {
        super("::0/0");
    }
}
exports.AnyIPv6 = AnyIPv6;
/**
 * A prefix list
 *
 * Prefix lists are used to allow traffic to VPC-local service endpoints.
 *
 * For more information, see this page:
 *
 * https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-endpoints.html
 */
class PrefixList {
    constructor(prefixListId) {
        this.prefixListId = prefixListId;
        this.canInlineRule = false;
        this.connections = new connections_1.Connections({ securityGroupRule: this });
        this.uniqueId = prefixListId;
    }
    toIngressRuleJSON() {
        return { sourcePrefixListId: this.prefixListId };
    }
    toEgressRuleJSON() {
        return { destinationPrefixListId: this.prefixListId };
    }
}
exports.PrefixList = PrefixList;
/**
 * Protocol for use in Connection Rules
 */
var Protocol;
(function (Protocol) {
    Protocol["All"] = "-1";
    Protocol["Tcp"] = "tcp";
    Protocol["Udp"] = "udp";
    Protocol["Icmp"] = "icmp";
    Protocol["Icmpv6"] = "58";
})(Protocol = exports.Protocol || (exports.Protocol = {}));
/**
 * A single TCP port
 */
class TcpPort {
    constructor(port) {
        this.port = port;
        this.canInlineRule = !cdk_1.Token.isUnresolved(this.port);
    }
    toRuleJSON() {
        return {
            ipProtocol: Protocol.Tcp,
            fromPort: this.port,
            toPort: this.port
        };
    }
    toString() {
        return cdk_1.Token.isUnresolved(this.port) ? `{IndirectPort}` : this.port.toString();
    }
}
exports.TcpPort = TcpPort;
/**
 * A TCP port range
 */
class TcpPortRange {
    constructor(startPort, endPort) {
        this.startPort = startPort;
        this.endPort = endPort;
        this.canInlineRule = !cdk_1.Token.isUnresolved(this.startPort) && !cdk_1.Token.isUnresolved(this.endPort);
    }
    toRuleJSON() {
        return {
            ipProtocol: Protocol.Tcp,
            fromPort: this.startPort,
            toPort: this.endPort
        };
    }
    toString() {
        return `${this.startPort}-${this.endPort}`;
    }
}
exports.TcpPortRange = TcpPortRange;
/**
 * All TCP Ports
 */
class TcpAllPorts {
    constructor() {
        this.canInlineRule = true;
    }
    toRuleJSON() {
        return {
            ipProtocol: Protocol.Tcp,
            fromPort: 0,
            toPort: 65535
        };
    }
    toString() {
        return 'ALL PORTS';
    }
}
exports.TcpAllPorts = TcpAllPorts;
/**
 * A single UDP port
 */
class UdpPort {
    constructor(port) {
        this.port = port;
        this.canInlineRule = !cdk_1.Token.isUnresolved(this.port);
    }
    toRuleJSON() {
        return {
            ipProtocol: Protocol.Udp,
            fromPort: this.port,
            toPort: this.port
        };
    }
    toString() {
        const port = cdk_1.Token.isUnresolved(this.port) ? '{IndirectPort}' : this.port;
        return `UDP ${port}`;
    }
}
exports.UdpPort = UdpPort;
/**
 * A UDP port range
 */
class UdpPortRange {
    constructor(startPort, endPort) {
        this.startPort = startPort;
        this.endPort = endPort;
        this.canInlineRule = !cdk_1.Token.isUnresolved(this.startPort) && !cdk_1.Token.isUnresolved(this.endPort);
    }
    toRuleJSON() {
        return {
            ipProtocol: Protocol.Udp,
            fromPort: this.startPort,
            toPort: this.endPort
        };
    }
    toString() {
        return `UDP ${this.startPort}-${this.endPort}`;
    }
}
exports.UdpPortRange = UdpPortRange;
/**
 * All UDP Ports
 */
class UdpAllPorts {
    constructor() {
        this.canInlineRule = true;
    }
    toRuleJSON() {
        return {
            ipProtocol: Protocol.Udp,
            fromPort: 0,
            toPort: 65535
        };
    }
    toString() {
        return 'UDP ALL PORTS';
    }
}
exports.UdpAllPorts = UdpAllPorts;
/**
 * A set of matching ICMP Type & Code
 */
class IcmpTypeAndCode {
    constructor(type, code) {
        this.type = type;
        this.code = code;
        this.canInlineRule = !cdk_1.Token.isUnresolved(this.type) && !cdk_1.Token.isUnresolved(this.code);
    }
    toRuleJSON() {
        return {
            ipProtocol: Protocol.Icmp,
            fromPort: this.type,
            toPort: this.code
        };
    }
    toString() {
        return `ICMP Type ${this.type} Code ${this.code}`;
    }
}
exports.IcmpTypeAndCode = IcmpTypeAndCode;
/**
 * ICMP Ping traffic
 */
class IcmpPing {
    constructor() {
        this.canInlineRule = true;
    }
    toRuleJSON() {
        return {
            ipProtocol: Protocol.Icmp,
            fromPort: 8,
            toPort: -1
        };
    }
    toString() {
        return `ICMP PING`;
    }
}
exports.IcmpPing = IcmpPing;
/**
 * All ICMP Codes for a given ICMP Type
 */
class IcmpAllTypeCodes {
    constructor(type) {
        this.type = type;
        this.canInlineRule = !cdk_1.Token.isUnresolved(this.type);
    }
    toRuleJSON() {
        return {
            ipProtocol: Protocol.Icmp,
            fromPort: this.type,
            toPort: -1
        };
    }
    toString() {
        return `ICMP Type ${this.type}`;
    }
}
exports.IcmpAllTypeCodes = IcmpAllTypeCodes;
/**
 * All ICMP Types & Codes
 */
class IcmpAllTypesAndCodes {
    constructor() {
        this.canInlineRule = true;
    }
    toRuleJSON() {
        return {
            ipProtocol: Protocol.Icmp,
            fromPort: -1,
            toPort: -1
        };
    }
    toString() {
        return 'ALL ICMP';
    }
}
exports.IcmpAllTypesAndCodes = IcmpAllTypesAndCodes;
/**
 * All Traffic
 */
class AllTraffic {
    constructor() {
        this.canInlineRule = true;
    }
    toRuleJSON() {
        return {
            ipProtocol: '-1',
        };
    }
    toString() {
        return 'ALL TRAFFIC';
    }
}
exports.AllTraffic = AllTraffic;
//# sourceMappingURL=data:application/json;base64,