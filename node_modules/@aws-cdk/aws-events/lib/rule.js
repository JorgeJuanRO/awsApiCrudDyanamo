"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk_1 = require("@aws-cdk/cdk");
const events_generated_1 = require("./events.generated");
const util_1 = require("./util");
/**
 * Defines a CloudWatch Event Rule in this stack.
 *
 * @resource AWS::Events::Rule
 */
class Rule extends cdk_1.Resource {
    constructor(scope, id, props = {}) {
        super(scope, id);
        this.targets = new Array();
        this.eventPattern = {};
        const resource = new events_generated_1.CfnRule(this, 'Resource', {
            name: props.ruleName,
            description: props.description,
            state: props.enabled == null ? 'ENABLED' : (props.enabled ? 'ENABLED' : 'DISABLED'),
            scheduleExpression: cdk_1.Lazy.stringValue({ produce: () => this.scheduleExpression }),
            eventPattern: cdk_1.Lazy.anyValue({ produce: () => this.renderEventPattern() }),
            targets: cdk_1.Lazy.anyValue({ produce: () => this.renderTargets() }),
        });
        this.ruleArn = resource.attrArn;
        this.addEventPattern(props.eventPattern);
        this.scheduleExpression = props.schedule && props.schedule.expressionString;
        for (const target of props.targets || []) {
            this.addTarget(target);
        }
    }
    static fromEventRuleArn(scope, id, eventRuleArn) {
        class Import extends cdk_1.Resource {
            constructor() {
                super(...arguments);
                this.ruleArn = eventRuleArn;
            }
        }
        return new Import(scope, id);
    }
    /**
     * Adds a target to the rule. The abstract class RuleTarget can be extended to define new
     * targets.
     *
     * No-op if target is undefined.
     */
    addTarget(target) {
        if (!target) {
            return;
        }
        const targetProps = target.bind(this);
        const id = sanitizeId(targetProps.id);
        const inputProps = targetProps.input && targetProps.input.bind(this);
        // check if a target with this ID already exists
        if (this.targets.find(t => t.id === id)) {
            throw new Error('Duplicate event rule target with ID: ' + id);
        }
        const roleArn = targetProps.role ? targetProps.role.roleArn : undefined;
        this.targets.push({
            id,
            arn: targetProps.arn,
            roleArn,
            ecsParameters: targetProps.ecsParameters,
            kinesisParameters: targetProps.kinesisParameters,
            runCommandParameters: targetProps.runCommandParameters,
            input: inputProps && inputProps.input,
            inputPath: inputProps && inputProps.inputPath,
            inputTransformer: inputProps && inputProps.inputTemplate !== undefined ? {
                inputTemplate: inputProps.inputTemplate,
                inputPathsMap: inputProps.inputPathsMap,
            } : undefined,
        });
    }
    /**
     * Adds an event pattern filter to this rule. If a pattern was already specified,
     * these values are merged into the existing pattern.
     *
     * For example, if the rule already contains the pattern:
     *
     *    {
     *      "resources": [ "r1" ],
     *      "detail": {
     *        "hello": [ 1 ]
     *      }
     *    }
     *
     * And `addEventPattern` is called with the pattern:
     *
     *    {
     *      "resources": [ "r2" ],
     *      "detail": {
     *        "foo": [ "bar" ]
     *      }
     *    }
     *
     * The resulting event pattern will be:
     *
     *    {
     *      "resources": [ "r1", "r2" ],
     *      "detail": {
     *        "hello": [ 1 ],
     *        "foo": [ "bar" ]
     *      }
     *    }
     *
     */
    addEventPattern(eventPattern) {
        if (!eventPattern) {
            return;
        }
        util_1.mergeEventPattern(this.eventPattern, eventPattern);
    }
    validate() {
        if (Object.keys(this.eventPattern).length === 0 && !this.scheduleExpression) {
            return [`Either 'eventPattern' or 'schedule' must be defined`];
        }
        return [];
    }
    renderTargets() {
        if (this.targets.length === 0) {
            return undefined;
        }
        return this.targets;
    }
    renderEventPattern() {
        const eventPattern = this.eventPattern;
        if (Object.keys(eventPattern).length === 0) {
            return undefined;
        }
        // rename 'detailType' to 'detail-type'
        const out = {};
        for (let key of Object.keys(eventPattern)) {
            const value = eventPattern[key];
            if (key === 'detailType') {
                key = 'detail-type';
            }
            out[key] = value;
        }
        return out;
    }
}
exports.Rule = Rule;
/**
 * Sanitize whatever is returned to make a valid ID
 *
 * Result must match regex [\.\-_A-Za-z0-9]+
 */
function sanitizeId(id) {
    const _id = id.replace(/[^\.\-_A-Za-z0-9]/g, '-');
    // cut to 64 chars to respect AWS::Events::Rule Target Id field specification
    return _id.substring(Math.max(_id.length - 64, 0), _id.length);
}
//# sourceMappingURL=data:application/json;base64,